// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2013 NVIDIA Corporation. All rights reserved.

// This file was generated by NvParameterized/scripts/GenParameterized.pl
// Created: 2017.02.26 07:50:25

#include "NvHairSceneDescriptor.h"
#include <string.h>
#include <stdlib.h>

using namespace NvParameterized;

namespace nvidia
{
namespace parameterized
{

using namespace HairSceneDescriptorNS;

const char* const HairSceneDescriptorFactory::vptr =
    NvParameterized::getVptr<HairSceneDescriptor, HairSceneDescriptor::ClassAlignment>();

const uint32_t NumParamDefs = 17;
static NvParameterized::DefinitionImpl* ParamDefTable; // now allocated in buildTree [NumParamDefs];


static const size_t ParamLookupChildrenTable[] =
{
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
};

#define TENUM(type) nvidia::##type
#define CHILDREN(index) &ParamLookupChildrenTable[index]
static const NvParameterized::ParamLookupNode ParamLookupTable[NumParamDefs] =
{
	{ TYPE_STRUCT, false, 0, CHILDREN(0), 16 },
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->densityTexture), NULL, 0 }, // densityTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->rootColorTexture), NULL, 0 }, // rootColorTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->tipColorTexture), NULL, 0 }, // tipColorTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->widthTexture), NULL, 0 }, // widthTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->rootWidthTexture), NULL, 0 }, // rootWidthTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->tipWidthTexture), NULL, 0 }, // tipWidthTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->stiffnessTexture), NULL, 0 }, // stiffnessTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->rootStiffnessTexture), NULL, 0 }, // rootStiffnessTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->clumpScaleTexture), NULL, 0 }, // clumpScaleTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->clumpRoundnessTexture), NULL, 0 }, // clumpRoundnessTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->clumpNoiseTexture), NULL, 0 }, // clumpNoiseTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->waveScaletexture), NULL, 0 }, // waveScaletexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->waveFreqTexture), NULL, 0 }, // waveFreqTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->strandTexture), NULL, 0 }, // strandTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->lengthTexture), NULL, 0 }, // lengthTexture
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->specularTexture), NULL, 0 }, // specularTexture
};


bool HairSceneDescriptor::mBuiltFlag = false;
NvParameterized::MutexType HairSceneDescriptor::mBuiltFlagMutex;

HairSceneDescriptor::HairSceneDescriptor(NvParameterized::Traits* traits, void* buf, int32_t* refCount) :
	NvParameters(traits, buf, refCount)
{
	//mParameterizedTraits->registerFactory(className(), &HairSceneDescriptorFactoryInst);

	if (!buf) //Do not init data if it is inplace-deserialized
	{
		initDynamicArrays();
		initStrings();
		initReferences();
		initDefaults();
	}
}

HairSceneDescriptor::~HairSceneDescriptor()
{
	freeStrings();
	freeReferences();
	freeDynamicArrays();
}

void HairSceneDescriptor::destroy()
{
	// We cache these fields here to avoid overwrite in destructor
	bool doDeallocateSelf = mDoDeallocateSelf;
	NvParameterized::Traits* traits = mParameterizedTraits;
	int32_t* refCount = mRefCount;
	void* buf = mBuffer;

	this->~HairSceneDescriptor();

	NvParameters::destroy(this, traits, doDeallocateSelf, refCount, buf);
}

const NvParameterized::DefinitionImpl* HairSceneDescriptor::getParameterDefinitionTree(void)
{
	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

const NvParameterized::DefinitionImpl* HairSceneDescriptor::getParameterDefinitionTree(void) const
{
	HairSceneDescriptor* tmpParam = const_cast<HairSceneDescriptor*>(this);

	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			tmpParam->buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

NvParameterized::ErrorType HairSceneDescriptor::getParameterHandle(const char* long_name, Handle& handle) const
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

NvParameterized::ErrorType HairSceneDescriptor::getParameterHandle(const char* long_name, Handle& handle)
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

void HairSceneDescriptor::getVarPtr(const Handle& handle, void*& ptr, size_t& offset) const
{
	ptr = getVarPtrHelper(&ParamLookupTable[0], const_cast<HairSceneDescriptor::ParametersStruct*>(&parameters()), handle, offset);
}


/* Dynamic Handle Indices */

void HairSceneDescriptor::freeParameterDefinitionTable(NvParameterized::Traits* traits)
{
	if (!traits)
	{
		return;
	}

	if (!mBuiltFlag) // Double-checked lock
	{
		return;
	}

	NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);

	if (!mBuiltFlag)
	{
		return;
	}

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		ParamDefTable[i].~DefinitionImpl();
	}

	traits->free(ParamDefTable);

	mBuiltFlag = false;
}

#define PDEF_PTR(index) (&ParamDefTable[index])

void HairSceneDescriptor::buildTree(void)
{

	uint32_t allocSize = sizeof(NvParameterized::DefinitionImpl) * NumParamDefs;
	ParamDefTable = (NvParameterized::DefinitionImpl*)(mParameterizedTraits->alloc(allocSize));
	memset(ParamDefTable, 0, allocSize);

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		NV_PARAM_PLACEMENT_NEW(ParamDefTable + i, NvParameterized::DefinitionImpl)(*mParameterizedTraits);
	}

	// Initialize DefinitionImpl node: nodeIndex=0, longName=""
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[0];
		ParamDef->init("", TYPE_STRUCT, "STRUCT", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=1, longName="densityTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[1];
		ParamDef->init("densityTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "density texture", true);
		ParamDefTable[1].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=2, longName="rootColorTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[2];
		ParamDef->init("rootColorTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "root color texture", true);
		ParamDefTable[2].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=3, longName="tipColorTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[3];
		ParamDef->init("tipColorTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "tip color texture", true);
		ParamDefTable[3].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=4, longName="widthTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[4];
		ParamDef->init("widthTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "root width texture", true);
		ParamDefTable[4].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=5, longName="rootWidthTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[5];
		ParamDef->init("rootWidthTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "root width texture", true);
		ParamDefTable[5].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=6, longName="tipWidthTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[6];
		ParamDef->init("tipWidthTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "top width texture", true);
		ParamDefTable[6].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=7, longName="stiffnessTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[7];
		ParamDef->init("stiffnessTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "stiffness texture", true);
		ParamDefTable[7].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=8, longName="rootStiffnessTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[8];
		ParamDef->init("rootStiffnessTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "root stiffness texture", true);
		ParamDefTable[8].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=9, longName="clumpScaleTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[9];
		ParamDef->init("clumpScaleTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "clump scale texture", true);
		ParamDefTable[9].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=10, longName="clumpRoundnessTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[10];
		ParamDef->init("clumpRoundnessTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "clump scale texture", true);
		ParamDefTable[10].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=11, longName="clumpNoiseTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[11];
		ParamDef->init("clumpNoiseTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "clump noise texture", true);
		ParamDefTable[11].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=12, longName="waveScaletexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[12];
		ParamDef->init("waveScaletexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "wave scale texture", true);
		ParamDefTable[12].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=13, longName="waveFreqTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[13];
		ParamDef->init("waveFreqTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "wave freq texture", true);
		ParamDefTable[13].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=14, longName="strandTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[14];
		ParamDef->init("strandTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "strand texture", true);
		ParamDefTable[14].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=15, longName="lengthTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[15];
		ParamDef->init("lengthTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "length texture", true);
		ParamDefTable[15].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=16, longName="specularTexture"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[16];
		ParamDef->init("specularTexture", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "specular texture", true);
		ParamDefTable[16].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// SetChildren for: nodeIndex=0, longName=""
	{
		static Definition* Children[16];
		Children[0] = PDEF_PTR(1);
		Children[1] = PDEF_PTR(2);
		Children[2] = PDEF_PTR(3);
		Children[3] = PDEF_PTR(4);
		Children[4] = PDEF_PTR(5);
		Children[5] = PDEF_PTR(6);
		Children[6] = PDEF_PTR(7);
		Children[7] = PDEF_PTR(8);
		Children[8] = PDEF_PTR(9);
		Children[9] = PDEF_PTR(10);
		Children[10] = PDEF_PTR(11);
		Children[11] = PDEF_PTR(12);
		Children[12] = PDEF_PTR(13);
		Children[13] = PDEF_PTR(14);
		Children[14] = PDEF_PTR(15);
		Children[15] = PDEF_PTR(16);

		ParamDefTable[0].setChildren(Children, 16);
	}

	mBuiltFlag = true;

}
void HairSceneDescriptor::initStrings(void)
{
	densityTexture.isAllocated = true;
	densityTexture.buf = NULL;
	rootColorTexture.isAllocated = true;
	rootColorTexture.buf = NULL;
	tipColorTexture.isAllocated = true;
	tipColorTexture.buf = NULL;
	widthTexture.isAllocated = true;
	widthTexture.buf = NULL;
	rootWidthTexture.isAllocated = true;
	rootWidthTexture.buf = NULL;
	tipWidthTexture.isAllocated = true;
	tipWidthTexture.buf = NULL;
	stiffnessTexture.isAllocated = true;
	stiffnessTexture.buf = NULL;
	rootStiffnessTexture.isAllocated = true;
	rootStiffnessTexture.buf = NULL;
	clumpScaleTexture.isAllocated = true;
	clumpScaleTexture.buf = NULL;
	clumpRoundnessTexture.isAllocated = true;
	clumpRoundnessTexture.buf = NULL;
	clumpNoiseTexture.isAllocated = true;
	clumpNoiseTexture.buf = NULL;
	waveScaletexture.isAllocated = true;
	waveScaletexture.buf = NULL;
	waveFreqTexture.isAllocated = true;
	waveFreqTexture.buf = NULL;
	strandTexture.isAllocated = true;
	strandTexture.buf = NULL;
	lengthTexture.isAllocated = true;
	lengthTexture.buf = NULL;
	specularTexture.isAllocated = true;
	specularTexture.buf = NULL;
}

void HairSceneDescriptor::initDynamicArrays(void)
{
}

void HairSceneDescriptor::initDefaults(void)
{

	freeStrings();
	freeReferences();
	freeDynamicArrays();

	initDynamicArrays();
	initStrings();
	initReferences();
}

void HairSceneDescriptor::initReferences(void)
{
}

void HairSceneDescriptor::freeDynamicArrays(void)
{
}

void HairSceneDescriptor::freeStrings(void)
{

	if (densityTexture.isAllocated && densityTexture.buf)
	{
		mParameterizedTraits->strfree((char*)densityTexture.buf);
	}

	if (rootColorTexture.isAllocated && rootColorTexture.buf)
	{
		mParameterizedTraits->strfree((char*)rootColorTexture.buf);
	}

	if (tipColorTexture.isAllocated && tipColorTexture.buf)
	{
		mParameterizedTraits->strfree((char*)tipColorTexture.buf);
	}

	if (widthTexture.isAllocated && widthTexture.buf)
	{
		mParameterizedTraits->strfree((char*)widthTexture.buf);
	}

	if (rootWidthTexture.isAllocated && rootWidthTexture.buf)
	{
		mParameterizedTraits->strfree((char*)rootWidthTexture.buf);
	}

	if (tipWidthTexture.isAllocated && tipWidthTexture.buf)
	{
		mParameterizedTraits->strfree((char*)tipWidthTexture.buf);
	}

	if (stiffnessTexture.isAllocated && stiffnessTexture.buf)
	{
		mParameterizedTraits->strfree((char*)stiffnessTexture.buf);
	}

	if (rootStiffnessTexture.isAllocated && rootStiffnessTexture.buf)
	{
		mParameterizedTraits->strfree((char*)rootStiffnessTexture.buf);
	}

	if (clumpScaleTexture.isAllocated && clumpScaleTexture.buf)
	{
		mParameterizedTraits->strfree((char*)clumpScaleTexture.buf);
	}

	if (clumpRoundnessTexture.isAllocated && clumpRoundnessTexture.buf)
	{
		mParameterizedTraits->strfree((char*)clumpRoundnessTexture.buf);
	}

	if (clumpNoiseTexture.isAllocated && clumpNoiseTexture.buf)
	{
		mParameterizedTraits->strfree((char*)clumpNoiseTexture.buf);
	}

	if (waveScaletexture.isAllocated && waveScaletexture.buf)
	{
		mParameterizedTraits->strfree((char*)waveScaletexture.buf);
	}

	if (waveFreqTexture.isAllocated && waveFreqTexture.buf)
	{
		mParameterizedTraits->strfree((char*)waveFreqTexture.buf);
	}

	if (strandTexture.isAllocated && strandTexture.buf)
	{
		mParameterizedTraits->strfree((char*)strandTexture.buf);
	}

	if (lengthTexture.isAllocated && lengthTexture.buf)
	{
		mParameterizedTraits->strfree((char*)lengthTexture.buf);
	}

	if (specularTexture.isAllocated && specularTexture.buf)
	{
		mParameterizedTraits->strfree((char*)specularTexture.buf);
	}
}

void HairSceneDescriptor::freeReferences(void)
{
}

} // namespace parameterized
} // namespace nvidia
