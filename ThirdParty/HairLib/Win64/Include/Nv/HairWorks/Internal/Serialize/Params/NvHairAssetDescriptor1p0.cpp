// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2013 NVIDIA Corporation. All rights reserved.

// This file was generated by NvParameterized/scripts/GenParameterized.pl
// Created: 2017.02.26 07:50:25

#include "NvHairAssetDescriptor1p0.h"
#include <string.h>
#include <stdlib.h>

using namespace NvParameterized;

namespace nvidia
{
namespace parameterized
{
namespace legacy
{
namespace ver1p0
{

using namespace HairAssetDescriptorNS;

const char* const HairAssetDescriptorFactory::vptr =
    NvParameterized::getVptr<HairAssetDescriptor, HairAssetDescriptor::ClassAlignment>();

const uint32_t NumParamDefs = 28;
static NvParameterized::DefinitionImpl* ParamDefTable; // now allocated in buildTree [NumParamDefs];


static const size_t ParamLookupChildrenTable[] =
{
	1, 2, 3, 5, 7, 8, 10, 12, 13, 15, 17, 19, 21, 23, 25, 26, 27, 4, 6, 9, 11, 14, 16,
	18, 20, 22, 24,
};

#define TENUM(type) nvidia::##type
#define CHILDREN(index) &ParamLookupChildrenTable[index]
static const NvParameterized::ParamLookupNode ParamLookupTable[NumParamDefs] =
{
	{ TYPE_STRUCT, false, 0, CHILDREN(0), 17 },
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->numGuideHairs), NULL, 0 }, // numGuideHairs
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->numVertices), NULL, 0 }, // numVertices
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->vertices), CHILDREN(17), 1 }, // vertices
	{ TYPE_VEC3, false, 1 * sizeof(nvidia::NvVec3), NULL, 0 }, // vertices[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->endIndices), CHILDREN(18), 1 }, // endIndices
	{ TYPE_U32, false, 1 * sizeof(uint32_t), NULL, 0 }, // endIndices[]
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->numFaces), NULL, 0 }, // numFaces
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->faceIndices), CHILDREN(19), 1 }, // faceIndices
	{ TYPE_U32, false, 1 * sizeof(uint32_t), NULL, 0 }, // faceIndices[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->faceUVs), CHILDREN(20), 1 }, // faceUVs
	{ TYPE_VEC2, false, 1 * sizeof(nvidia::NvVec2), NULL, 0 }, // faceUVs[]
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->numBones), NULL, 0 }, // numBones
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->boneIndices), CHILDREN(21), 1 }, // boneIndices
	{ TYPE_VEC4, false, 1 * sizeof(nvidia::NvVec4), NULL, 0 }, // boneIndices[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->boneWeights), CHILDREN(22), 1 }, // boneWeights
	{ TYPE_VEC4, false, 1 * sizeof(nvidia::NvVec4), NULL, 0 }, // boneWeights[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->boneNames), CHILDREN(23), 1 }, // boneNames
	{ TYPE_U8, false, 1 * sizeof(uint8_t), NULL, 0 }, // boneNames[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->boneNameList), CHILDREN(24), 1 }, // boneNameList
	{ TYPE_STRING, false, 1 * sizeof(NvParameterized::DummyStringStruct), NULL, 0 }, // boneNameList[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->bindPoses), CHILDREN(25), 1 }, // bindPoses
	{ TYPE_MAT44, false, 1 * sizeof(nvidia::NvMat44), NULL, 0 }, // bindPoses[]
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->boneParents), CHILDREN(26), 1 }, // boneParents
	{ TYPE_I32, false, 1 * sizeof(int32_t), NULL, 0 }, // boneParents[]
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->sceneUnit), NULL, 0 }, // sceneUnit
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->upAxis), NULL, 0 }, // upAxis
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->handedness), NULL, 0 }, // handedness
};


bool HairAssetDescriptor::mBuiltFlag = false;
NvParameterized::MutexType HairAssetDescriptor::mBuiltFlagMutex;

HairAssetDescriptor::HairAssetDescriptor(NvParameterized::Traits* traits, void* buf, int32_t* refCount) :
	NvParameters(traits, buf, refCount)
{
	//mParameterizedTraits->registerFactory(className(), &HairAssetDescriptorFactoryInst);

	if (!buf) //Do not init data if it is inplace-deserialized
	{
		initDynamicArrays();
		initStrings();
		initReferences();
		initDefaults();
	}
}

HairAssetDescriptor::~HairAssetDescriptor()
{
	freeStrings();
	freeReferences();
	freeDynamicArrays();
}

void HairAssetDescriptor::destroy()
{
	// We cache these fields here to avoid overwrite in destructor
	bool doDeallocateSelf = mDoDeallocateSelf;
	NvParameterized::Traits* traits = mParameterizedTraits;
	int32_t* refCount = mRefCount;
	void* buf = mBuffer;

	this->~HairAssetDescriptor();

	NvParameters::destroy(this, traits, doDeallocateSelf, refCount, buf);
}

const NvParameterized::DefinitionImpl* HairAssetDescriptor::getParameterDefinitionTree(void)
{
	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

const NvParameterized::DefinitionImpl* HairAssetDescriptor::getParameterDefinitionTree(void) const
{
	HairAssetDescriptor* tmpParam = const_cast<HairAssetDescriptor*>(this);

	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			tmpParam->buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

NvParameterized::ErrorType HairAssetDescriptor::getParameterHandle(const char* long_name, Handle& handle) const
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

NvParameterized::ErrorType HairAssetDescriptor::getParameterHandle(const char* long_name, Handle& handle)
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

void HairAssetDescriptor::getVarPtr(const Handle& handle, void*& ptr, size_t& offset) const
{
	ptr = getVarPtrHelper(&ParamLookupTable[0], const_cast<HairAssetDescriptor::ParametersStruct*>(&parameters()), handle, offset);
}


/* Dynamic Handle Indices */
/* [0] - boneNameList (not an array of structs) */

void HairAssetDescriptor::freeParameterDefinitionTable(NvParameterized::Traits* traits)
{
	if (!traits)
	{
		return;
	}

	if (!mBuiltFlag) // Double-checked lock
	{
		return;
	}

	NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);

	if (!mBuiltFlag)
	{
		return;
	}

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		ParamDefTable[i].~DefinitionImpl();
	}

	traits->free(ParamDefTable);

	mBuiltFlag = false;
}

#define PDEF_PTR(index) (&ParamDefTable[index])

void HairAssetDescriptor::buildTree(void)
{

	uint32_t allocSize = sizeof(NvParameterized::DefinitionImpl) * NumParamDefs;
	ParamDefTable = (NvParameterized::DefinitionImpl*)(mParameterizedTraits->alloc(allocSize));
	memset(ParamDefTable, 0, allocSize);

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		NV_PARAM_PLACEMENT_NEW(ParamDefTable + i, NvParameterized::DefinitionImpl)(*mParameterizedTraits);
	}

	// Initialize DefinitionImpl node: nodeIndex=0, longName=""
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[0];
		ParamDef->init("", TYPE_STRUCT, "STRUCT", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=1, longName="numGuideHairs"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[1];
		ParamDef->init("numGuideHairs", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[1].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "number of hair guide hair curves", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "number of guide hairs", true);
		ParamDefTable[1].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=2, longName="numVertices"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[2];
		ParamDef->init("numVertices", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[2].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "number of total # of cvs in guide curves", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "number of vertices", true);
		ParamDefTable[2].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=3, longName="vertices"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[3];
		ParamDef->init("vertices", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[3].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "all the cv data of guide curves", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "vertices", true);
		ParamDefTable[3].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=4, longName="vertices[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[4];
		ParamDef->init("vertices", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[4].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "all the cv data of guide curves", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "vertices", true);
		ParamDefTable[4].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=5, longName="endIndices"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[5];
		ParamDef->init("endIndices", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[5].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "last vertex index of each hair, size of this array should be 'numGuideHairs'", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "end indices", true);
		ParamDefTable[5].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=6, longName="endIndices[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[6];
		ParamDef->init("endIndices", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[6].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "last vertex index of each hair, size of this array should be 'numGuideHairs'", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "end indices", true);
		ParamDefTable[6].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=7, longName="numFaces"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[7];
		ParamDef->init("numFaces", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[7].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "number of hair triangles, we grow hairs for each mesh triangles", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "number of faces", true);
		ParamDefTable[7].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=8, longName="faceIndices"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[8];
		ParamDef->init("faceIndices", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[8].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "triangle indices for hair faces, size must be 3 * m_nbHairFaces", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "face indices", true);
		ParamDefTable[8].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=9, longName="faceIndices[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[9];
		ParamDef->init("faceIndices", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[9].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "triangle indices for hair faces, size must be 3 * m_nbHairFaces", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "face indices", true);
		ParamDefTable[9].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=10, longName="faceUVs"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[10];
		ParamDef->init("faceUVs", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[10].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "uv values for hair faces, size must be 3 * m_nbHairFaces", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "face UVs", true);
		ParamDefTable[10].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=11, longName="faceUVs[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[11];
		ParamDef->init("faceUVs", TYPE_VEC2, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[11].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "uv values for hair faces, size must be 3 * m_nbHairFaces", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "face UVs", true);
		ParamDefTable[11].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=12, longName="numBones"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[12];
		ParamDef->init("numBones", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[12].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "number of bones", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "number of bones", true);
		ParamDefTable[12].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=13, longName="boneIndices"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[13];
		ParamDef->init("boneIndices", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[13].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "size should be 'numGuideHairs'. each mesh vertex (hair root) can have up to 4 bone indices.", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "bone indices", true);
		ParamDefTable[13].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=14, longName="boneIndices[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[14];
		ParamDef->init("boneIndices", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[14].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "size should be 'numGuideHairs'. each mesh vertex (hair root) can have up to 4 bone indices.", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "bone indices", true);
		ParamDefTable[14].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=15, longName="boneWeights"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[15];
		ParamDef->init("boneWeights", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[15].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "size should be 'numGuideHairs'. each mesh vertex (hair root) can have up to 4 bone weights.", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "bone weights", true);
		ParamDefTable[15].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=16, longName="boneWeights[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[16];
		ParamDef->init("boneWeights", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[16].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "size should be 'numGuideHairs'. each mesh vertex (hair root) can have up to 4 bone weights.", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "bone weights", true);
		ParamDefTable[16].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=17, longName="boneNames"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[17];
		ParamDef->init("boneNames", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "names for each bone used to check if bone names match. buffer size should be at least BONENAME_SIZE * 'numBones'.", true);
		HintTable[1].init("shortDescription", "bone names", true);
		ParamDefTable[17].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=18, longName="boneNames[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[18];
		ParamDef->init("boneNames", TYPE_U8, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "names for each bone used to check if bone names match. buffer size should be at least BONENAME_SIZE * 'numBones'.", true);
		HintTable[1].init("shortDescription", "bone names", true);
		ParamDefTable[18].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=19, longName="boneNameList"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[19];
		ParamDef->init("boneNameList", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "names for each bone used to check if bone names match. buffer size should be at least BONENAME_SIZE * 'numBones'.", true);
		HintTable[1].init("shortDescription", "bone name list", true);
		ParamDefTable[19].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
		static const uint8_t dynHandleIndices[1] = { 0, };
		ParamDef->setDynamicHandleIndicesMap(dynHandleIndices, 1);

	}

	// Initialize DefinitionImpl node: nodeIndex=20, longName="boneNameList[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[20];
		ParamDef->init("boneNameList", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "names for each bone used to check if bone names match. buffer size should be at least BONENAME_SIZE * 'numBones'.", true);
		HintTable[1].init("shortDescription", "bone name list", true);
		ParamDefTable[20].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=21, longName="bindPoses"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[21];
		ParamDef->init("bindPoses", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "bind pose matrices for each bone. buffer size should be at least sizeof(gfsdk_float4x4) * m_NumBones.", true);
		HintTable[1].init("shortDescription", "bind pose matrices", true);
		ParamDefTable[21].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=22, longName="bindPoses[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[22];
		ParamDef->init("bindPoses", TYPE_MAT44, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "bind pose matrices for each bone. buffer size should be at least sizeof(gfsdk_float4x4) * m_NumBones.", true);
		HintTable[1].init("shortDescription", "bind pose matrices", true);
		ParamDefTable[22].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=23, longName="boneParents"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[23];
		ParamDef->init("boneParents", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "parent index for each bone.  if this is a root bone, the index will be -1. buffer size should be at least sizoef(gfsdk_S32) * m_NumBones.", true);
		HintTable[1].init("shortDescription", "bone parents", true);
		ParamDefTable[23].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
	}

	// Initialize DefinitionImpl node: nodeIndex=24, longName="boneParents[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[24];
		ParamDef->init("boneParents", TYPE_I32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "parent index for each bone.  if this is a root bone, the index will be -1. buffer size should be at least sizoef(gfsdk_S32) * m_NumBones.", true);
		HintTable[1].init("shortDescription", "bone parents", true);
		ParamDefTable[24].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=25, longName="sceneUnit"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[25];
		ParamDef->init("sceneUnit", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "scene unit scale", true);
		ParamDefTable[25].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=26, longName="upAxis"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[26];
		ParamDef->init("upAxis", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(2), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[26].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "0: unknown, 1: y-up, 2: z-up", true);
		HintTable[1].init("max", uint64_t(2), true);
		HintTable[2].init("min", uint64_t(0), true);
		HintTable[3].init("shortDescription", "up axis", true);
		ParamDefTable[26].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=27, longName="handedness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[27];
		ParamDef->init("handedness", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(2), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[27].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "0: unknown, 1: right handed, 2: left handed", true);
		HintTable[1].init("max", uint64_t(2), true);
		HintTable[2].init("min", uint64_t(0), true);
		HintTable[3].init("shortDescription", "handedness", true);
		ParamDefTable[27].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// SetChildren for: nodeIndex=0, longName=""
	{
		static Definition* Children[17];
		Children[0] = PDEF_PTR(1);
		Children[1] = PDEF_PTR(2);
		Children[2] = PDEF_PTR(3);
		Children[3] = PDEF_PTR(5);
		Children[4] = PDEF_PTR(7);
		Children[5] = PDEF_PTR(8);
		Children[6] = PDEF_PTR(10);
		Children[7] = PDEF_PTR(12);
		Children[8] = PDEF_PTR(13);
		Children[9] = PDEF_PTR(15);
		Children[10] = PDEF_PTR(17);
		Children[11] = PDEF_PTR(19);
		Children[12] = PDEF_PTR(21);
		Children[13] = PDEF_PTR(23);
		Children[14] = PDEF_PTR(25);
		Children[15] = PDEF_PTR(26);
		Children[16] = PDEF_PTR(27);

		ParamDefTable[0].setChildren(Children, 17);
	}

	// SetChildren for: nodeIndex=3, longName="vertices"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(4);

		ParamDefTable[3].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=5, longName="endIndices"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(6);

		ParamDefTable[5].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=8, longName="faceIndices"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(9);

		ParamDefTable[8].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=10, longName="faceUVs"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(11);

		ParamDefTable[10].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=13, longName="boneIndices"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(14);

		ParamDefTable[13].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=15, longName="boneWeights"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(16);

		ParamDefTable[15].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=17, longName="boneNames"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(18);

		ParamDefTable[17].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=19, longName="boneNameList"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(20);

		ParamDefTable[19].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=21, longName="bindPoses"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(22);

		ParamDefTable[21].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=23, longName="boneParents"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(24);

		ParamDefTable[23].setChildren(Children, 1);
	}

	mBuiltFlag = true;

}
void HairAssetDescriptor::initStrings(void)
{
}

void HairAssetDescriptor::initDynamicArrays(void)
{
	vertices.buf = NULL;
	vertices.isAllocated = true;
	vertices.elementSize = sizeof(nvidia::NvVec3);
	vertices.arraySizes[0] = 0;
	endIndices.buf = NULL;
	endIndices.isAllocated = true;
	endIndices.elementSize = sizeof(uint32_t);
	endIndices.arraySizes[0] = 0;
	faceIndices.buf = NULL;
	faceIndices.isAllocated = true;
	faceIndices.elementSize = sizeof(uint32_t);
	faceIndices.arraySizes[0] = 0;
	faceUVs.buf = NULL;
	faceUVs.isAllocated = true;
	faceUVs.elementSize = sizeof(nvidia::NvVec2);
	faceUVs.arraySizes[0] = 0;
	boneIndices.buf = NULL;
	boneIndices.isAllocated = true;
	boneIndices.elementSize = sizeof(nvidia::NvVec4);
	boneIndices.arraySizes[0] = 0;
	boneWeights.buf = NULL;
	boneWeights.isAllocated = true;
	boneWeights.elementSize = sizeof(nvidia::NvVec4);
	boneWeights.arraySizes[0] = 0;
	boneNames.buf = NULL;
	boneNames.isAllocated = true;
	boneNames.elementSize = sizeof(uint8_t);
	boneNames.arraySizes[0] = 0;
	boneNameList.buf = NULL;
	boneNameList.isAllocated = true;
	boneNameList.elementSize = sizeof(NvParameterized::DummyStringStruct);
	boneNameList.arraySizes[0] = 0;
	bindPoses.buf = NULL;
	bindPoses.isAllocated = true;
	bindPoses.elementSize = sizeof(nvidia::NvMat44);
	bindPoses.arraySizes[0] = 0;
	boneParents.buf = NULL;
	boneParents.isAllocated = true;
	boneParents.elementSize = sizeof(int32_t);
	boneParents.arraySizes[0] = 0;
}

void HairAssetDescriptor::initDefaults(void)
{

	freeStrings();
	freeReferences();
	freeDynamicArrays();
	numGuideHairs = uint32_t(0);
	numVertices = uint32_t(0);
	numFaces = uint32_t(0);
	numBones = uint32_t(0);
	sceneUnit = float(1.0);
	upAxis = uint32_t(0);
	handedness = uint32_t(0);

	initDynamicArrays();
	initStrings();
	initReferences();
}

void HairAssetDescriptor::initReferences(void)
{
}

void HairAssetDescriptor::freeDynamicArrays(void)
{
	if (vertices.isAllocated && vertices.buf)
	{
		mParameterizedTraits->free(vertices.buf);
	}
	if (endIndices.isAllocated && endIndices.buf)
	{
		mParameterizedTraits->free(endIndices.buf);
	}
	if (faceIndices.isAllocated && faceIndices.buf)
	{
		mParameterizedTraits->free(faceIndices.buf);
	}
	if (faceUVs.isAllocated && faceUVs.buf)
	{
		mParameterizedTraits->free(faceUVs.buf);
	}
	if (boneIndices.isAllocated && boneIndices.buf)
	{
		mParameterizedTraits->free(boneIndices.buf);
	}
	if (boneWeights.isAllocated && boneWeights.buf)
	{
		mParameterizedTraits->free(boneWeights.buf);
	}
	if (boneNames.isAllocated && boneNames.buf)
	{
		mParameterizedTraits->free(boneNames.buf);
	}
	if (boneNameList.isAllocated && boneNameList.buf)
	{
		mParameterizedTraits->free(boneNameList.buf);
	}
	if (bindPoses.isAllocated && bindPoses.buf)
	{
		mParameterizedTraits->free(bindPoses.buf);
	}
	if (boneParents.isAllocated && boneParents.buf)
	{
		mParameterizedTraits->free(boneParents.buf);
	}
}

void HairAssetDescriptor::freeStrings(void)
{

	for (int i = 0; i < boneNameList.arraySizes[0]; ++i)
	{
		if (boneNameList.buf[i].isAllocated && boneNameList.buf[i].buf)
		{
			mParameterizedTraits->strfree((char*)boneNameList.buf[i].buf);
		}
	}
}

void HairAssetDescriptor::freeReferences(void)
{
}

} // namespace ver1p0
} // namespace legacy
} // namespace parameterized
} // namespace nvidia
