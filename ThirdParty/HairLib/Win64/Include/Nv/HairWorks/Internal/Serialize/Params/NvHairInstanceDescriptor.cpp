// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2013 NVIDIA Corporation. All rights reserved.

// This file was generated by NvParameterized/scripts/GenParameterized.pl
// Created: 2017.02.26 07:50:25

#include "NvHairInstanceDescriptor.h"
#include <string.h>
#include <stdlib.h>

using namespace NvParameterized;

namespace nvidia
{
namespace parameterized
{

using namespace HairInstanceDescriptorNS;

const char* const HairInstanceDescriptorFactory::vptr =
    NvParameterized::getVptr<HairInstanceDescriptor, HairInstanceDescriptor::ClassAlignment>();

const uint32_t NumParamDefs = 136;
static NvParameterized::DefinitionImpl* ParamDefTable; // now allocated in buildTree [NumParamDefs];


static const size_t ParamLookupChildrenTable[] =
{
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
};

#define TENUM(type) nvidia::##type
#define CHILDREN(index) &ParamLookupChildrenTable[index]
static const NvParameterized::ParamLookupNode ParamLookupTable[NumParamDefs] =
{
	{ TYPE_STRUCT, false, 0, CHILDREN(0), 1 },
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->materials), CHILDREN(1), 1 }, // materials
	{ TYPE_STRUCT, false, 1 * sizeof(Material_Type), CHILDREN(2), 133 }, // materials[]
	{ TYPE_STRING, false, (size_t)(&((Material_Type*)0)->name), NULL, 0 }, // materials[].name
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->densityTextureChan), NULL, 0 }, // materials[].densityTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->widthTextureChan), NULL, 0 }, // materials[].widthTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->rootWidthTextureChan), NULL, 0 }, // materials[].rootWidthTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->tipWidthTextureChan), NULL, 0 }, // materials[].tipWidthTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->clumpScaleTextureChan), NULL, 0 }, // materials[].clumpScaleTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->clumpNoiseTextureChan), NULL, 0 }, // materials[].clumpNoiseTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->clumpRoundnessTextureChan), NULL, 0 }, // materials[].clumpRoundnessTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->waveScaleTextureChan), NULL, 0 }, // materials[].waveScaleTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->waveFreqTextureChan), NULL, 0 }, // materials[].waveFreqTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->lengthTextureChan), NULL, 0 }, // materials[].lengthTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->stiffnessTextureChan), NULL, 0 }, // materials[].stiffnessTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->rootStiffnessTextureChan), NULL, 0 }, // materials[].rootStiffnessTextureChan
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->splineMultiplier), NULL, 0 }, // materials[].splineMultiplier
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->assetType), NULL, 0 }, // materials[].assetType
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->assetPriority), NULL, 0 }, // materials[].assetPriority
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->assetGroup), NULL, 0 }, // materials[].assetGroup
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->width), NULL, 0 }, // materials[].width
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->widthNoise), NULL, 0 }, // materials[].widthNoise
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->clumpNoise), NULL, 0 }, // materials[].clumpNoise
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->clumpNumSubclumps), NULL, 0 }, // materials[].clumpNumSubclumps
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->clumpRoundness), NULL, 0 }, // materials[].clumpRoundness
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->clumpScale), NULL, 0 }, // materials[].clumpScale
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->clumpPerVertex), NULL, 0 }, // materials[].clumpPerVertex
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->density), NULL, 0 }, // materials[].density
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->lengthNoise), NULL, 0 }, // materials[].lengthNoise
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->lengthScale), NULL, 0 }, // materials[].lengthScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->widthRootScale), NULL, 0 }, // materials[].widthRootScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->widthTipScale), NULL, 0 }, // materials[].widthTipScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveRootStraighten), NULL, 0 }, // materials[].waveRootStraighten
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveScale), NULL, 0 }, // materials[].waveScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveScaleNoise), NULL, 0 }, // materials[].waveScaleNoise
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveFreq), NULL, 0 }, // materials[].waveFreq
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveFreqNoise), NULL, 0 }, // materials[].waveFreqNoise
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveScaleStrand), NULL, 0 }, // materials[].waveScaleStrand
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->waveScaleClump), NULL, 0 }, // materials[].waveScaleClump
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->enableDistanceLOD), NULL, 0 }, // materials[].enableDistanceLOD
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->distanceLODStart), NULL, 0 }, // materials[].distanceLODStart
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->distanceLODEnd), NULL, 0 }, // materials[].distanceLODEnd
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->distanceLODFadeStart), NULL, 0 }, // materials[].distanceLODFadeStart
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->distanceLODDensity), NULL, 0 }, // materials[].distanceLODDensity
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->distanceLODWidth), NULL, 0 }, // materials[].distanceLODWidth
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->enableDetailLOD), NULL, 0 }, // materials[].enableDetailLOD
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->detailLODStart), NULL, 0 }, // materials[].detailLODStart
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->detailLODEnd), NULL, 0 }, // materials[].detailLODEnd
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->detailLODDensity), NULL, 0 }, // materials[].detailLODDensity
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->detailLODWidth), NULL, 0 }, // materials[].detailLODWidth
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->colorizeLODOption), NULL, 0 }, // materials[].colorizeLODOption
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->useViewfrustrumCulling), NULL, 0 }, // materials[].useViewfrustrumCulling
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->useBackfaceCulling), NULL, 0 }, // materials[].useBackfaceCulling
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->backfaceCullingThreshold), NULL, 0 }, // materials[].backfaceCullingThreshold
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->usePixelDensity), NULL, 0 }, // materials[].usePixelDensity
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->alpha), NULL, 0 }, // materials[].alpha
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->strandBlendScale), NULL, 0 }, // materials[].strandBlendScale
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->baseColor), NULL, 0 }, // materials[].baseColor
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseBlend), NULL, 0 }, // materials[].diffuseBlend
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseScale), NULL, 0 }, // materials[].diffuseScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseHairNormalWeight), NULL, 0 }, // materials[].diffuseHairNormalWeight
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->diffuseBoneIndex), NULL, 0 }, // materials[].diffuseBoneIndex
	{ TYPE_VEC3, false, (size_t)(&((Material_Type*)0)->diffuseBoneLocalPos), NULL, 0 }, // materials[].diffuseBoneLocalPos
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseNoiseFreqU), NULL, 0 }, // materials[].diffuseNoiseFreqU
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseNoiseFreqV), NULL, 0 }, // materials[].diffuseNoiseFreqV
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseNoiseScale), NULL, 0 }, // materials[].diffuseNoiseScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->diffuseNoiseGain), NULL, 0 }, // materials[].diffuseNoiseGain
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->textureBrightness), NULL, 0 }, // materials[].textureBrightness
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->diffuseColor), NULL, 0 }, // materials[].diffuseColor
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->rootColor), NULL, 0 }, // materials[].rootColor
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->tipColor), NULL, 0 }, // materials[].tipColor
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->glintStrength), NULL, 0 }, // materials[].glintStrength
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->glintCount), NULL, 0 }, // materials[].glintCount
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->glintExponent), NULL, 0 }, // materials[].glintExponent
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->rootAlphaFalloff), NULL, 0 }, // materials[].rootAlphaFalloff
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->rootTipColorWeight), NULL, 0 }, // materials[].rootTipColorWeight
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->rootTipColorFalloff), NULL, 0 }, // materials[].rootTipColorFalloff
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->shadowSigma), NULL, 0 }, // materials[].shadowSigma
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->specularColor), NULL, 0 }, // materials[].specularColor
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularPrimary), NULL, 0 }, // materials[].specularPrimary
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularNoiseScale), NULL, 0 }, // materials[].specularNoiseScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularEnvScale), NULL, 0 }, // materials[].specularEnvScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularPrimaryBreakup), NULL, 0 }, // materials[].specularPrimaryBreakup
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularSecondary), NULL, 0 }, // materials[].specularSecondary
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularSecondaryOffset), NULL, 0 }, // materials[].specularSecondaryOffset
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularPowerPrimary), NULL, 0 }, // materials[].specularPowerPrimary
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->specularPowerSecondary), NULL, 0 }, // materials[].specularPowerSecondary
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->strandBlendMode), NULL, 0 }, // materials[].strandBlendMode
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->useTextures), NULL, 0 }, // materials[].useTextures
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->useShadows), NULL, 0 }, // materials[].useShadows
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->shadowDensityScale), NULL, 0 }, // materials[].shadowDensityScale
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->castShadows), NULL, 0 }, // materials[].castShadows
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->receiveShadows), NULL, 0 }, // materials[].receiveShadows
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->backStopRadius), NULL, 0 }, // materials[].backStopRadius
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->bendStiffness), NULL, 0 }, // materials[].bendStiffness
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->interactionStiffness), NULL, 0 }, // materials[].interactionStiffness
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->pinStiffness), NULL, 0 }, // materials[].pinStiffness
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->collisionOffset), NULL, 0 }, // materials[].collisionOffset
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->useCollision), NULL, 0 }, // materials[].useCollision
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->useDynamicPin), NULL, 0 }, // materials[].useDynamicPin
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->damping), NULL, 0 }, // materials[].damping
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->friction), NULL, 0 }, // materials[].friction
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->massScale), NULL, 0 }, // materials[].massScale
	{ TYPE_VEC3, false, (size_t)(&((Material_Type*)0)->gravity), NULL, 0 }, // materials[].gravity
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->inertiaScale), NULL, 0 }, // materials[].inertiaScale
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->inertiaLimit), NULL, 0 }, // materials[].inertiaLimit
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->rootStiffness), NULL, 0 }, // materials[].rootStiffness
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->tipStiffness), NULL, 0 }, // materials[].tipStiffness
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->simulate), NULL, 0 }, // materials[].simulate
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->stiffness), NULL, 0 }, // materials[].stiffness
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->stiffnessStrength), NULL, 0 }, // materials[].stiffnessStrength
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->stiffnessDamping), NULL, 0 }, // materials[].stiffnessDamping
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->stiffnessCurve), NULL, 0 }, // materials[].stiffnessCurve
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->stiffnessStrengthCurve), NULL, 0 }, // materials[].stiffnessStrengthCurve
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->stiffnessDampingCurve), NULL, 0 }, // materials[].stiffnessDampingCurve
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->bendStiffnessCurve), NULL, 0 }, // materials[].bendStiffnessCurve
	{ TYPE_VEC4, false, (size_t)(&((Material_Type*)0)->interactionStiffnessCurve), NULL, 0 }, // materials[].interactionStiffnessCurve
	{ TYPE_VEC3, false, (size_t)(&((Material_Type*)0)->wind), NULL, 0 }, // materials[].wind
	{ TYPE_F32, false, (size_t)(&((Material_Type*)0)->windNoise), NULL, 0 }, // materials[].windNoise
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeBones), NULL, 0 }, // materials[].visualizeBones
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeBoundingBox), NULL, 0 }, // materials[].visualizeBoundingBox
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeCapsules), NULL, 0 }, // materials[].visualizeCapsules
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeControlVertices), NULL, 0 }, // materials[].visualizeControlVertices
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeCullSphere), NULL, 0 }, // materials[].visualizeCullSphere
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeDiffuseBone), NULL, 0 }, // materials[].visualizeDiffuseBone
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeFrames), NULL, 0 }, // materials[].visualizeFrames
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeGrowthMesh), NULL, 0 }, // materials[].visualizeGrowthMesh
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeGuideHairs), NULL, 0 }, // materials[].visualizeGuideHairs
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeHairInteractions), NULL, 0 }, // materials[].visualizeHairInteractions
	{ TYPE_U32, false, (size_t)(&((Material_Type*)0)->visualizeHairSkips), NULL, 0 }, // materials[].visualizeHairSkips
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeLocalPos), NULL, 0 }, // materials[].visualizeLocalPos
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizePinConstraints), NULL, 0 }, // materials[].visualizePinConstraints
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeShadingNormals), NULL, 0 }, // materials[].visualizeShadingNormals
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->visualizeSkinnedGuideHairs), NULL, 0 }, // materials[].visualizeSkinnedGuideHairs
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->drawRenderHairs), NULL, 0 }, // materials[].drawRenderHairs
	{ TYPE_BOOL, false, (size_t)(&((Material_Type*)0)->enable), NULL, 0 }, // materials[].enable
};


bool HairInstanceDescriptor::mBuiltFlag = false;
NvParameterized::MutexType HairInstanceDescriptor::mBuiltFlagMutex;

HairInstanceDescriptor::HairInstanceDescriptor(NvParameterized::Traits* traits, void* buf, int32_t* refCount) :
	NvParameters(traits, buf, refCount)
{
	//mParameterizedTraits->registerFactory(className(), &HairInstanceDescriptorFactoryInst);

	if (!buf) //Do not init data if it is inplace-deserialized
	{
		initDynamicArrays();
		initStrings();
		initReferences();
		initDefaults();
	}
}

HairInstanceDescriptor::~HairInstanceDescriptor()
{
	freeStrings();
	freeReferences();
	freeDynamicArrays();
}

void HairInstanceDescriptor::destroy()
{
	// We cache these fields here to avoid overwrite in destructor
	bool doDeallocateSelf = mDoDeallocateSelf;
	NvParameterized::Traits* traits = mParameterizedTraits;
	int32_t* refCount = mRefCount;
	void* buf = mBuffer;

	this->~HairInstanceDescriptor();

	NvParameters::destroy(this, traits, doDeallocateSelf, refCount, buf);
}

const NvParameterized::DefinitionImpl* HairInstanceDescriptor::getParameterDefinitionTree(void)
{
	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

const NvParameterized::DefinitionImpl* HairInstanceDescriptor::getParameterDefinitionTree(void) const
{
	HairInstanceDescriptor* tmpParam = const_cast<HairInstanceDescriptor*>(this);

	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			tmpParam->buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

NvParameterized::ErrorType HairInstanceDescriptor::getParameterHandle(const char* long_name, Handle& handle) const
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

NvParameterized::ErrorType HairInstanceDescriptor::getParameterHandle(const char* long_name, Handle& handle)
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

void HairInstanceDescriptor::getVarPtr(const Handle& handle, void*& ptr, size_t& offset) const
{
	ptr = getVarPtrHelper(&ParamLookupTable[0], const_cast<HairInstanceDescriptor::ParametersStruct*>(&parameters()), handle, offset);
}


/* Dynamic Handle Indices */
/* [1,0] - materials.name */

void HairInstanceDescriptor::freeParameterDefinitionTable(NvParameterized::Traits* traits)
{
	if (!traits)
	{
		return;
	}

	if (!mBuiltFlag) // Double-checked lock
	{
		return;
	}

	NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);

	if (!mBuiltFlag)
	{
		return;
	}

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		ParamDefTable[i].~DefinitionImpl();
	}

	traits->free(ParamDefTable);

	mBuiltFlag = false;
}

#define PDEF_PTR(index) (&ParamDefTable[index])

void HairInstanceDescriptor::buildTree(void)
{

	uint32_t allocSize = sizeof(NvParameterized::DefinitionImpl) * NumParamDefs;
	ParamDefTable = (NvParameterized::DefinitionImpl*)(mParameterizedTraits->alloc(allocSize));
	memset(ParamDefTable, 0, allocSize);

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		NV_PARAM_PLACEMENT_NEW(ParamDefTable + i, NvParameterized::DefinitionImpl)(*mParameterizedTraits);
	}

	// Initialize DefinitionImpl node: nodeIndex=0, longName=""
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[0];
		ParamDef->init("", TYPE_STRUCT, "STRUCT", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=1, longName="materials"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[1];
		ParamDef->init("materials", TYPE_ARRAY, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "additional hair materials", true);
		HintTable[1].init("shortDescription", "additional hair materials", true);
		ParamDefTable[1].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
		static const uint8_t dynHandleIndices[2] = { 1, 0, };
		ParamDef->setDynamicHandleIndicesMap(dynHandleIndices, 2);

	}

	// Initialize DefinitionImpl node: nodeIndex=2, longName="materials[]"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[2];
		ParamDef->init("materials", TYPE_STRUCT, "Material", true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "additional hair materials", true);
		HintTable[1].init("shortDescription", "additional hair materials", true);
		ParamDefTable[2].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=3, longName="materials[].name"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[3];
		ParamDef->init("name", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "material name", true);
		HintTable[1].init("shortDescription", "material name", true);
		ParamDefTable[3].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=4, longName="materials[].densityTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[4];
		ParamDef->init("densityTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=5, longName="materials[].widthTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[5];
		ParamDef->init("widthTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=6, longName="materials[].rootWidthTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[6];
		ParamDef->init("rootWidthTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=7, longName="materials[].tipWidthTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[7];
		ParamDef->init("tipWidthTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=8, longName="materials[].clumpScaleTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[8];
		ParamDef->init("clumpScaleTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=9, longName="materials[].clumpNoiseTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[9];
		ParamDef->init("clumpNoiseTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=10, longName="materials[].clumpRoundnessTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[10];
		ParamDef->init("clumpRoundnessTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=11, longName="materials[].waveScaleTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[11];
		ParamDef->init("waveScaleTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=12, longName="materials[].waveFreqTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[12];
		ParamDef->init("waveFreqTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=13, longName="materials[].lengthTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[13];
		ParamDef->init("lengthTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=14, longName="materials[].stiffnessTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[14];
		ParamDef->init("stiffnessTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=15, longName="materials[].rootStiffnessTextureChan"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[15];
		ParamDef->init("rootStiffnessTextureChan", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=16, longName="materials[].splineMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[16];
		ParamDef->init("splineMultiplier", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=17, longName="materials[].assetType"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[17];
		ParamDef->init("assetType", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=18, longName="materials[].assetPriority"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[18];
		ParamDef->init("assetPriority", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=19, longName="materials[].assetGroup"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[19];
		ParamDef->init("assetGroup", TYPE_U32, NULL, true);






	}

	// Initialize DefinitionImpl node: nodeIndex=20, longName="materials[].width"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[20];
		ParamDef->init("width", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[20].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] hair width ", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "width", true);
		ParamDefTable[20].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=21, longName="materials[].widthNoise"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[21];
		ParamDef->init("widthNoise", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[21].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "noise to hair width ", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "width noise", true);
		ParamDefTable[21].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=22, longName="materials[].clumpNoise"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[22];
		ParamDef->init("clumpNoise", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[22].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "probability of each hair gets clumped. (0 = all hairs get clumped, 1 = clump scale is randomly distributed from 0 to 1)", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "clump noise", true);
		ParamDefTable[22].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=23, longName="materials[].clumpNumSubclumps"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[23];
		ParamDef->init("clumpNumSubclumps", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(8.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[23].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "number of clumps per triangle", true);
		HintTable[1].init("max", double(8.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "clump num sub clumps", true);
		ParamDefTable[23].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=24, longName="materials[].clumpRoundness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[24];
		ParamDef->init("clumpRoundness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(2.000000000), true);
		HintTable[1].init("min", double(0.200000003), true);
		ParamDefTable[24].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "exponential factor to control roundness of clump shape. (0 = linear cone, clump scale *= power(t, roundness), where t is normalized distance from the root)", true);
		HintTable[1].init("max", double(2.000000000), true);
		HintTable[2].init("min", double(0.200000003), true);
		HintTable[3].init("shortDescription", "clump roundness", true);
		ParamDefTable[24].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=25, longName="materials[].clumpScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[25];
		ParamDef->init("clumpScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[25].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "how clumped each hair face is", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "clump scale", true);
		ParamDefTable[25].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=26, longName="materials[].clumpPerVertex"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[26];
		ParamDef->init("clumpPerVertex", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "whether to use per vertex or per face clumping mode", true);
		HintTable[1].init("shortDescription", "use per vertex clump or per face clump", true);
		ParamDefTable[26].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=27, longName="materials[].density"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[27];
		ParamDef->init("density", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[27].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "ratio of number of interpolated hairs compared to maximum ", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "hair density ratio", true);
		ParamDefTable[27].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=28, longName="materials[].lengthNoise"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[28];
		ParamDef->init("lengthNoise", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[28].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "length variation noise", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "length noise", true);
		ParamDefTable[28].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=29, longName="materials[].lengthScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[29];
		ParamDef->init("lengthScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[29].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "length control for growing hair effect", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "length scale", true);
		ParamDefTable[29].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=30, longName="materials[].widthRootScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[30];
		ParamDef->init("widthRootScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[30].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "scale factor for top side of the strand", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "width scale root", true);
		ParamDefTable[30].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=31, longName="materials[].widthTipScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[31];
		ParamDef->init("widthTipScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[31].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "scale factor for bottom side of the strand", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "width scale tip", true);
		ParamDefTable[31].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=32, longName="materials[].waveRootStraighten"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[32];
		ParamDef->init("waveRootStraighten", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[32].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "cutoff from root to make root not move by waviness ", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wave root straighten", true);
		ParamDefTable[32].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=33, longName="materials[].waveScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[33];
		ParamDef->init("waveScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[33].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] size of waves for hair waviness ", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wave scale", true);
		ParamDefTable[33].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=34, longName="materials[].waveScaleNoise"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[34];
		ParamDef->init("waveScaleNoise", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[34].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "noise factor for the wave scale", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wave scale noise", true);
		ParamDefTable[34].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=35, longName="materials[].waveFreq"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[35];
		ParamDef->init("waveFreq", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(1.000000000), true);
		ParamDefTable[35].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "wave frequency (1.0 = one sine wave along hair length)", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(1.000000000), true);
		HintTable[3].init("shortDescription", "wave freq", true);
		ParamDefTable[35].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=36, longName="materials[].waveFreqNoise"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[36];
		ParamDef->init("waveFreqNoise", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[36].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "noise factor for the wave frequency", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wave freq noise", true);
		ParamDefTable[36].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=37, longName="materials[].waveScaleStrand"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[37];
		ParamDef->init("waveScaleStrand", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[37].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] size of waves for hair waviness ", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wave scale", true);
		ParamDefTable[37].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=38, longName="materials[].waveScaleClump"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[38];
		ParamDef->init("waveScaleClump", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[38].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] size of waves for hair waviness ", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wave clump", true);
		ParamDefTable[38].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=39, longName="materials[].enableDistanceLOD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[39];
		ParamDef->init("enableDistanceLOD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "whether to enable lod for far away object (distance LOD)", true);
		HintTable[1].init("shortDescription", "Enable Distance LOD", true);
		ParamDefTable[39].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=40, longName="materials[].distanceLODStart"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[40];
		ParamDef->init("distanceLODStart", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[40].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] distance (in scene unit) to camera where fur will start fading out (by reducing density)", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "LOD fade start", true);
		ParamDefTable[40].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=41, longName="materials[].distanceLODEnd"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[41];
		ParamDef->init("distanceLODEnd", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1000.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[41].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] distance (in scene unit) to camera where fur will completely disappear (and stop simulating)", true);
		HintTable[1].init("max", double(1000.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "LOD fade end", true);
		ParamDefTable[41].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=42, longName="materials[].distanceLODFadeStart"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[42];
		ParamDef->init("distanceLODFadeStart", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[42].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] distance (in scene unit) to camera where fur will start fading out (by reducing density)", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "LOD fade start", true);
		ParamDefTable[42].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=43, longName="materials[].distanceLODDensity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[43];
		ParamDef->init("distanceLODDensity", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[43].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "distance lod density", true);
		ParamDefTable[43].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=44, longName="materials[].distanceLODWidth"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[44];
		ParamDef->init("distanceLODWidth", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(1.000000000), true);
		ParamDefTable[44].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] hair width that can change when lod is used", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(1.000000000), true);
		HintTable[3].init("shortDescription", "distance lod width scale", true);
		ParamDefTable[44].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=45, longName="materials[].enableDetailLOD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[45];
		ParamDef->init("enableDetailLOD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "whether to enable lod for close object (closeup LOD)", true);
		HintTable[1].init("shortDescription", "Enable Closeup LOD", true);
		ParamDefTable[45].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=46, longName="materials[].detailLODStart"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[46];
		ParamDef->init("detailLODStart", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[46].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] distance (in scene unit) to camera where fur will start getting denser toward closeup density", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "closeup start", true);
		ParamDefTable[46].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=47, longName="materials[].detailLODEnd"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[47];
		ParamDef->init("detailLODEnd", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[47].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] distance (in scene unit) to camera where fur will get full closeup density value", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "closeup end", true);
		ParamDefTable[47].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=48, longName="materials[].detailLODDensity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[48];
		ParamDef->init("detailLODDensity", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[48].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "ratio of number of interpolated hairs compared to maximum in closeup (can be larger than 1, 1 = 64 hairs per face)", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "closeup density", true);
		ParamDefTable[48].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=49, longName="materials[].detailLODWidth"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[49];
		ParamDef->init("detailLODWidth", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(1.000000000), true);
		ParamDefTable[49].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] hair width that can change when close up density is triggered by closeup lod mechanism", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(1.000000000), true);
		HintTable[3].init("shortDescription", "closeup width", true);
		ParamDefTable[49].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=50, longName="materials[].colorizeLODOption"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[50];
		ParamDef->init("colorizeLODOption", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "show LOD factor in color (works only when non-custom pixel shader is used)", true);
		HintTable[1].init("shortDescription", "colirize LOD", true);
		ParamDefTable[50].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=51, longName="materials[].useViewfrustrumCulling"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[51];
		ParamDef->init("useViewfrustrumCulling", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "when this is on, density for hairs outside view are set to 0. Use this option when fur is in a closeup.", true);
		HintTable[1].init("shortDescription", "use view frustum culling", true);
		ParamDefTable[51].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=52, longName="materials[].useBackfaceCulling"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[52];
		ParamDef->init("useBackfaceCulling", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "when this is on, density for hairs growning from backfacing faces will be set to 0.", true);
		HintTable[1].init("shortDescription", "use backface culling", true);
		ParamDefTable[52].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=53, longName="materials[].backfaceCullingThreshold"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[53];
		ParamDef->init("backfaceCullingThreshold", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(-1.000000000), true);
		ParamDefTable[53].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "threshold to determine backface, note that this value should be slightly smaller 0 to avoid hairs at the silhouette from disappearing", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(-1.000000000), true);
		HintTable[3].init("shortDescription", "backface culling threshold", true);
		ParamDefTable[53].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=54, longName="materials[].usePixelDensity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[54];
		ParamDef->init("usePixelDensity", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "use per pixel density for density map sampling", true);
		HintTable[1].init("shortDescription", "use per pixel density ", true);
		ParamDefTable[54].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=55, longName="materials[].alpha"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[55];
		ParamDef->init("alpha", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[55].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "alpha value used for all hairs", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "alpha", true);
		ParamDefTable[55].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=56, longName="materials[].strandBlendScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[56];
		ParamDef->init("strandBlendScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[56].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "scale for strand texture blending", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "strand blend scale", true);
		ParamDefTable[56].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=57, longName="materials[].baseColor"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[57];
		ParamDef->init("baseColor", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "base color (when color textures are not used)", true);
		HintTable[1].init("shortDescription", "base color", true);
		ParamDefTable[57].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=58, longName="materials[].diffuseBlend"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[58];
		ParamDef->init("diffuseBlend", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[58].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "blend factor between tangent based hair lighting vs normal based skin lighting (0 = all tangent, 1 = all normal)", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse blend", true);
		ParamDefTable[58].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=59, longName="materials[].diffuseScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[59];
		ParamDef->init("diffuseScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[59].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "scale term for diffuse lighting", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse scale", true);
		ParamDefTable[59].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=60, longName="materials[].diffuseHairNormalWeight"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[60];
		ParamDef->init("diffuseHairNormalWeight", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[60].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "blend factor between mesh normal and long hair normal", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse hair normal weight", true);
		ParamDefTable[60].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=61, longName="materials[].diffuseBoneIndex"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[61];
		ParamDef->init("diffuseBoneIndex", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "bone index for diffuse hair normal", true);
		HintTable[1].init("shortDescription", "bone index for diffuse hair normal", true);
		ParamDefTable[61].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=62, longName="materials[].diffuseBoneLocalPos"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[62];
		ParamDef->init("diffuseBoneLocalPos", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1000.0), true);
		HintTable[1].init("min", double(-1000.0), true);
		ParamDefTable[62].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] offset for diffuse bone center", true);
		HintTable[1].init("max", double(1000.0), true);
		HintTable[2].init("min", double(-1000.0), true);
		HintTable[3].init("shortDescription", "diffuse local pos", true);
		ParamDefTable[62].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=63, longName="materials[].diffuseNoiseFreqU"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[63];
		ParamDef->init("diffuseNoiseFreqU", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1024.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[63].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "diffuse noise frequency along u", true);
		HintTable[1].init("max", double(1024.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse noise frequency along u", true);
		ParamDefTable[63].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=64, longName="materials[].diffuseNoiseFreqV"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[64];
		ParamDef->init("diffuseNoiseFreqV", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1024.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[64].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "diffuse noise frequency along v", true);
		HintTable[1].init("max", double(1024.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse noise frequency along v", true);
		ParamDefTable[64].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=65, longName="materials[].diffuseNoiseScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[65];
		ParamDef->init("diffuseNoiseScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[65].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "diffuse noise scale", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse noise scale", true);
		ParamDefTable[65].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=66, longName="materials[].diffuseNoiseGain"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[66];
		ParamDef->init("diffuseNoiseGain", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[66].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "diffuse noise gain", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "diffuse noise gain", true);
		ParamDefTable[66].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=67, longName="materials[].textureBrightness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[67];
		ParamDef->init("textureBrightness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(2.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[67].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "additional texture brightness control", true);
		HintTable[1].init("max", double(2.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "texture brightness", true);
		ParamDefTable[67].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=68, longName="materials[].diffuseColor"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[68];
		ParamDef->init("diffuseColor", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[68].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "diffuse lighting color (when specular textures are not used)", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "diffuse color", true);
		ParamDefTable[68].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=69, longName="materials[].rootColor"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[69];
		ParamDef->init("rootColor", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[69].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "hair color for root (when root color textures are not used)", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "root color", true);
		ParamDefTable[69].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=70, longName="materials[].tipColor"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[70];
		ParamDef->init("tipColor", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[70].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "hair color for tip (when tip color textures are not used)", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "tip color", true);
		ParamDefTable[70].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=71, longName="materials[].glintStrength"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[71];
		ParamDef->init("glintStrength", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "strength of glint effect", true);
		HintTable[1].init("shortDescription", "glint strength", true);
		ParamDefTable[71].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=72, longName="materials[].glintCount"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[72];
		ParamDef->init("glintCount", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "number of glint sparklets per hair", true);
		HintTable[1].init("shortDescription", "glint count", true);
		ParamDefTable[72].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=73, longName="materials[].glintExponent"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[73];
		ParamDef->init("glintExponent", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "power exponent of glint values", true);
		HintTable[1].init("shortDescription", "glint exponent", true);
		ParamDefTable[73].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=74, longName="materials[].rootAlphaFalloff"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[74];
		ParamDef->init("rootAlphaFalloff", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "bias factor for root/tip alpha blending ", true);
		HintTable[1].init("shortDescription", "root alpha falloff", true);
		ParamDefTable[74].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=75, longName="materials[].rootTipColorWeight"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[75];
		ParamDef->init("rootTipColorWeight", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "bias factor for root/tip color blending ", true);
		HintTable[1].init("shortDescription", "root tip color weight", true);
		ParamDefTable[75].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=76, longName="materials[].rootTipColorFalloff"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[76];
		ParamDef->init("rootTipColorFalloff", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "falloff factor for root/tip color interpolation ", true);
		HintTable[1].init("shortDescription", "root tip color falloff", true);
		ParamDefTable[76].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=77, longName="materials[].shadowSigma"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[77];
		ParamDef->init("shadowSigma", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[77].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] shadow absorption factor", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "shadow attenuation", true);
		ParamDefTable[77].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=78, longName="materials[].specularColor"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[78];
		ParamDef->init("specularColor", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[78].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "specular lighing color (when specular textures are not used)", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "specular color", true);
		ParamDefTable[78].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=79, longName="materials[].specularPrimary"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[79];
		ParamDef->init("specularPrimary", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[79].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "primary specular factor", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "specular primary", true);
		ParamDefTable[79].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=80, longName="materials[].specularNoiseScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[80];
		ParamDef->init("specularNoiseScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[80].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "noise for primary specular factor", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "specular noise", true);
		ParamDefTable[80].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=81, longName="materials[].specularEnvScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[81];
		ParamDef->init("specularEnvScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[81].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "scale factor for env specular", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "specular env scale", true);
		ParamDefTable[81].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=82, longName="materials[].specularPrimaryBreakup"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[82];
		ParamDef->init("specularPrimaryBreakup", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[82].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "noise factor to break up specular primary", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "specular primary breakup", true);
		ParamDefTable[82].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=83, longName="materials[].specularSecondary"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[83];
		ParamDef->init("specularSecondary", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[83].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "secondary specular factor", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "specular secondary", true);
		ParamDefTable[83].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=84, longName="materials[].specularSecondaryOffset"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[84];
		ParamDef->init("specularSecondaryOffset", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(-1.000000000), true);
		ParamDefTable[84].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "secondary highlight shift offset along tangents", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(-1.000000000), true);
		HintTable[3].init("shortDescription", "spec secondary offset", true);
		ParamDefTable[84].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=85, longName="materials[].specularPowerPrimary"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[85];
		ParamDef->init("specularPowerPrimary", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(100.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[85].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "primary specular power exponent", true);
		HintTable[1].init("max", double(100.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "spec primary power", true);
		ParamDefTable[85].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=86, longName="materials[].specularPowerSecondary"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[86];
		ParamDef->init("specularPowerSecondary", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(100.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[86].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "secondary specular power exponent", true);
		HintTable[1].init("max", double(100.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "spec secondary power", true);
		ParamDefTable[86].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=87, longName="materials[].strandBlendMode"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[87];
		ParamDef->init("strandBlendMode", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(2.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[87].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "blend mode for per strand texture", true);
		HintTable[1].init("max", double(2.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "blend mode for per strand texture", true);
		ParamDefTable[87].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=88, longName="materials[].useTextures"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[88];
		ParamDef->init("useTextures", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "use textures ", true);
		HintTable[1].init("shortDescription", "use textures", true);
		ParamDefTable[88].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=89, longName="materials[].useShadows"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[89];
		ParamDef->init("useShadows", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "turn on/off shadow", true);
		HintTable[1].init("shortDescription", "use shadows", true);
		ParamDefTable[89].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=90, longName="materials[].shadowDensityScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[90];
		ParamDef->init("shadowDensityScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[90].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "scale factor for env specular", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "specular env scale", true);
		ParamDefTable[90].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=91, longName="materials[].castShadows"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[91];
		ParamDef->init("castShadows", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "this hair casts shadows on the scene", true);
		HintTable[1].init("shortDescription", "cast shadows", true);
		ParamDefTable[91].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=92, longName="materials[].receiveShadows"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[92];
		ParamDef->init("receiveShadows", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "this hair receives shadows from the scene", true);
		HintTable[1].init("shortDescription", "receive shadows", true);
		ParamDefTable[92].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=93, longName="materials[].backStopRadius"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[93];
		ParamDef->init("backStopRadius", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[93].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] radius of backstop collision", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "backstop radius", true);
		ParamDefTable[93].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=94, longName="materials[].bendStiffness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[94];
		ParamDef->init("bendStiffness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[94].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness for bending, useful for long hair", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "bend stiffness", true);
		ParamDefTable[94].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=95, longName="materials[].interactionStiffness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[95];
		ParamDef->init("interactionStiffness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[95].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness for hair interaction, useful for long hair", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "interaction stiffness", true);
		ParamDefTable[95].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=96, longName="materials[].pinStiffness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[96];
		ParamDef->init("pinStiffness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[96].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness for pin constraints", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "pin stiffness", true);
		ParamDefTable[96].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=97, longName="materials[].collisionOffset"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[97];
		ParamDef->init("collisionOffset", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "[UNUSED] additional body offset for hair/body collision", true);
		HintTable[1].init("shortDescription", "collision offset", true);
		ParamDefTable[97].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=98, longName="materials[].useCollision"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[98];
		ParamDef->init("useCollision", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "whether to use the sphere/capsule collision or not for hair/body collision", true);
		HintTable[1].init("shortDescription", "use collision", true);
		ParamDefTable[98].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=99, longName="materials[].useDynamicPin"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[99];
		ParamDef->init("useDynamicPin", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "whether to use dynamic pin or bone based pin", true);
		HintTable[1].init("shortDescription", "use dynamic pin", true);
		ParamDefTable[99].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=100, longName="materials[].damping"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[100];
		ParamDef->init("damping", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(0.100000001), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[100].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "damping to slow down hair motion", true);
		HintTable[1].init("max", double(0.100000001), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "damping", true);
		ParamDefTable[100].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=101, longName="materials[].friction"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[101];
		ParamDef->init("friction", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.0), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[101].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "friction to slow down hair motion", true);
		HintTable[1].init("max", double(10.0), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "friction", true);
		ParamDefTable[101].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=102, longName="materials[].massScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[102];
		ParamDef->init("massScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1000.0000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[102].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "mass to scale gravity strength", true);
		HintTable[1].init("max", double(1000.0000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "massScale", true);
		ParamDefTable[102].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=103, longName="materials[].gravity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[103];
		ParamDef->init("gravity", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1000.0), true);
		HintTable[1].init("min", double(-1000.0), true);
		ParamDefTable[103].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] gravity force vector", true);
		HintTable[1].init("max", double(1000.0), true);
		HintTable[2].init("min", double(-1000.0), true);
		HintTable[3].init("shortDescription", "gravity", true);
		ParamDefTable[103].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=104, longName="materials[].inertiaScale"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[104];
		ParamDef->init("inertiaScale", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[104].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "Interia control. 0: no inertia, 1: full intertia", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "inertia scale", true);
		ParamDefTable[104].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=105, longName="materials[].inertiaLimit"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[105];
		ParamDef->init("inertiaLimit", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1000.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[105].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] Speed limit beyond which everything gets locked to skinned position (teleport, etc.)", true);
		HintTable[1].init("max", double(1000.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "inertia limit", true);
		ParamDefTable[105].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=106, longName="materials[].rootStiffness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[106];
		ParamDef->init("rootStiffness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[106].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "attenuation of stiffness away from the root (stiffer at root, weaker toward tip)", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "root stiffness", true);
		ParamDefTable[106].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=107, longName="materials[].tipStiffness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[107];
		ParamDef->init("tipStiffness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[107].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "attenuation of stiffness away from the tip (stiffer at tip, weaker toward root)", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "tip stiffness", true);
		ParamDefTable[107].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=108, longName="materials[].simulate"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[108];
		ParamDef->init("simulate", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "whether to turn on/off simulation", true);
		HintTable[1].init("shortDescription", "simulate", true);
		ParamDefTable[108].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=109, longName="materials[].stiffness"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[109];
		ParamDef->init("stiffness", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[109].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness to restore to skinned rest shape for hairs", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "stiffness", true);
		ParamDefTable[109].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=110, longName="materials[].stiffnessStrength"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[110];
		ParamDef->init("stiffnessStrength", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[110].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness to restore to skinned rest shape for hairs", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "stiffness strength", true);
		ParamDefTable[110].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=111, longName="materials[].stiffnessDamping"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[111];
		ParamDef->init("stiffnessDamping", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[111].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness to restore to skinned rest shape for hairs", true);
		HintTable[1].init("max", double(1.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "stiffness damping", true);
		ParamDefTable[111].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=112, longName="materials[].stiffnessCurve"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[112];
		ParamDef->init("stiffnessCurve", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[112].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness curve", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "curve for stiffness", true);
		ParamDefTable[112].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=113, longName="materials[].stiffnessStrengthCurve"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[113];
		ParamDef->init("stiffnessStrengthCurve", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[113].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness curve", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "curve for stiffness", true);
		ParamDefTable[113].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=114, longName="materials[].stiffnessDampingCurve"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[114];
		ParamDef->init("stiffnessDampingCurve", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[114].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness curve", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "curve for stiffness", true);
		ParamDefTable[114].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=115, longName="materials[].bendStiffnessCurve"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[115];
		ParamDef->init("bendStiffnessCurve", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[115].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness curve", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "curve for stiffness", true);
		ParamDefTable[115].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=116, longName="materials[].interactionStiffnessCurve"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[116];
		ParamDef->init("interactionStiffnessCurve", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		ParamDefTable[116].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "stiffness curve", true);
		HintTable[1].init("max", double(1.0), true);
		HintTable[2].init("min", double(0.0), true);
		HintTable[3].init("shortDescription", "curve for stiffness", true);
		ParamDefTable[116].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=117, longName="materials[].wind"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[117];
		ParamDef->init("wind", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.0), true);
		HintTable[1].init("min", double(-10.0), true);
		ParamDefTable[117].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "[UNIT DEPENDENT] vector force for main wind direction", true);
		HintTable[1].init("max", double(10.0), true);
		HintTable[2].init("min", double(-10.0), true);
		HintTable[3].init("shortDescription", "wind", true);
		ParamDefTable[117].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=118, longName="materials[].windNoise"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[118];
		ParamDef->init("windNoise", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[118].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "strength of wind noise", true);
		HintTable[1].init("max", double(10.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "wind noise", true);
		ParamDefTable[118].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=119, longName="materials[].visualizeBones"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[119];
		ParamDef->init("visualizeBones", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw bones ", true);
		HintTable[1].init("shortDescription", "visualize bones", true);
		ParamDefTable[119].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=120, longName="materials[].visualizeBoundingBox"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[120];
		ParamDef->init("visualizeBoundingBox", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw bounding box ", true);
		HintTable[1].init("shortDescription", "visualize bounding box", true);
		ParamDefTable[120].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=121, longName="materials[].visualizeCapsules"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[121];
		ParamDef->init("visualizeCapsules", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw collision capsules", true);
		HintTable[1].init("shortDescription", "visualize capsules", true);
		ParamDefTable[121].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=122, longName="materials[].visualizeControlVertices"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[122];
		ParamDef->init("visualizeControlVertices", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "visualize control points", true);
		HintTable[1].init("shortDescription", "visualize control points", true);
		ParamDefTable[122].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=123, longName="materials[].visualizeCullSphere"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[123];
		ParamDef->init("visualizeCullSphere", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw cull sphere", true);
		HintTable[1].init("shortDescription", "draw cull sphere", true);
		ParamDefTable[123].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=124, longName="materials[].visualizeDiffuseBone"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[124];
		ParamDef->init("visualizeDiffuseBone", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "visualize diffuse bone", true);
		HintTable[1].init("shortDescription", "visualize diffuse bone", true);
		ParamDefTable[124].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=125, longName="materials[].visualizeFrames"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[125];
		ParamDef->init("visualizeFrames", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw frames ", true);
		HintTable[1].init("shortDescription", "visualize framess", true);
		ParamDefTable[125].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=126, longName="materials[].visualizeGrowthMesh"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[126];
		ParamDef->init("visualizeGrowthMesh", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw growth mesh", true);
		HintTable[1].init("shortDescription", "visualize growth mesh", true);
		ParamDefTable[126].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=127, longName="materials[].visualizeGuideHairs"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[127];
		ParamDef->init("visualizeGuideHairs", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw guide hairs", true);
		HintTable[1].init("shortDescription", "visualize guide hairs", true);
		ParamDefTable[127].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=128, longName="materials[].visualizeHairInteractions"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[128];
		ParamDef->init("visualizeHairInteractions", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw hair interaction", true);
		HintTable[1].init("shortDescription", "visualize hair interaction connections", true);
		ParamDefTable[128].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=129, longName="materials[].visualizeHairSkips"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[129];
		ParamDef->init("visualizeHairSkips", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", double(10000.000000000), true);
		HintTable[1].init("min", double(0.000000000), true);
		ParamDefTable[129].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("longDescription", "how many hairs to skip in visualization", true);
		HintTable[1].init("max", double(10000.000000000), true);
		HintTable[2].init("min", double(0.000000000), true);
		HintTable[3].init("shortDescription", "hair skips", true);
		ParamDefTable[129].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=130, longName="materials[].visualizeLocalPos"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[130];
		ParamDef->init("visualizeLocalPos", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw local pos ", true);
		HintTable[1].init("shortDescription", "visualize local pos", true);
		ParamDefTable[130].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=131, longName="materials[].visualizePinConstraints"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[131];
		ParamDef->init("visualizePinConstraints", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw pin constraints ", true);
		HintTable[1].init("shortDescription", "visualize pin constraints", true);
		ParamDefTable[131].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=132, longName="materials[].visualizeShadingNormals"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[132];
		ParamDef->init("visualizeShadingNormals", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "visualize shading normals", true);
		HintTable[1].init("shortDescription", "visualize shading normals", true);
		ParamDefTable[132].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=133, longName="materials[].visualizeSkinnedGuideHairs"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[133];
		ParamDef->init("visualizeSkinnedGuideHairs", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw skinned guide hairs", true);
		HintTable[1].init("shortDescription", "visualize skinned pose for guide hairs", true);
		ParamDefTable[133].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=134, longName="materials[].drawRenderHairs"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[134];
		ParamDef->init("drawRenderHairs", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "draw render hair", true);
		HintTable[1].init("shortDescription", "draw render hairs", true);
		ParamDefTable[134].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=135, longName="materials[].enable"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[135];
		ParamDef->init("enable", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "enable rendering and simulation", true);
		HintTable[1].init("shortDescription", "enable", true);
		ParamDefTable[135].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// SetChildren for: nodeIndex=0, longName=""
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(1);

		ParamDefTable[0].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=1, longName="materials"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(2);

		ParamDefTable[1].setChildren(Children, 1);
	}

	// SetChildren for: nodeIndex=2, longName="materials[]"
	{
		static Definition* Children[133];
		Children[0] = PDEF_PTR(3);
		Children[1] = PDEF_PTR(4);
		Children[2] = PDEF_PTR(5);
		Children[3] = PDEF_PTR(6);
		Children[4] = PDEF_PTR(7);
		Children[5] = PDEF_PTR(8);
		Children[6] = PDEF_PTR(9);
		Children[7] = PDEF_PTR(10);
		Children[8] = PDEF_PTR(11);
		Children[9] = PDEF_PTR(12);
		Children[10] = PDEF_PTR(13);
		Children[11] = PDEF_PTR(14);
		Children[12] = PDEF_PTR(15);
		Children[13] = PDEF_PTR(16);
		Children[14] = PDEF_PTR(17);
		Children[15] = PDEF_PTR(18);
		Children[16] = PDEF_PTR(19);
		Children[17] = PDEF_PTR(20);
		Children[18] = PDEF_PTR(21);
		Children[19] = PDEF_PTR(22);
		Children[20] = PDEF_PTR(23);
		Children[21] = PDEF_PTR(24);
		Children[22] = PDEF_PTR(25);
		Children[23] = PDEF_PTR(26);
		Children[24] = PDEF_PTR(27);
		Children[25] = PDEF_PTR(28);
		Children[26] = PDEF_PTR(29);
		Children[27] = PDEF_PTR(30);
		Children[28] = PDEF_PTR(31);
		Children[29] = PDEF_PTR(32);
		Children[30] = PDEF_PTR(33);
		Children[31] = PDEF_PTR(34);
		Children[32] = PDEF_PTR(35);
		Children[33] = PDEF_PTR(36);
		Children[34] = PDEF_PTR(37);
		Children[35] = PDEF_PTR(38);
		Children[36] = PDEF_PTR(39);
		Children[37] = PDEF_PTR(40);
		Children[38] = PDEF_PTR(41);
		Children[39] = PDEF_PTR(42);
		Children[40] = PDEF_PTR(43);
		Children[41] = PDEF_PTR(44);
		Children[42] = PDEF_PTR(45);
		Children[43] = PDEF_PTR(46);
		Children[44] = PDEF_PTR(47);
		Children[45] = PDEF_PTR(48);
		Children[46] = PDEF_PTR(49);
		Children[47] = PDEF_PTR(50);
		Children[48] = PDEF_PTR(51);
		Children[49] = PDEF_PTR(52);
		Children[50] = PDEF_PTR(53);
		Children[51] = PDEF_PTR(54);
		Children[52] = PDEF_PTR(55);
		Children[53] = PDEF_PTR(56);
		Children[54] = PDEF_PTR(57);
		Children[55] = PDEF_PTR(58);
		Children[56] = PDEF_PTR(59);
		Children[57] = PDEF_PTR(60);
		Children[58] = PDEF_PTR(61);
		Children[59] = PDEF_PTR(62);
		Children[60] = PDEF_PTR(63);
		Children[61] = PDEF_PTR(64);
		Children[62] = PDEF_PTR(65);
		Children[63] = PDEF_PTR(66);
		Children[64] = PDEF_PTR(67);
		Children[65] = PDEF_PTR(68);
		Children[66] = PDEF_PTR(69);
		Children[67] = PDEF_PTR(70);
		Children[68] = PDEF_PTR(71);
		Children[69] = PDEF_PTR(72);
		Children[70] = PDEF_PTR(73);
		Children[71] = PDEF_PTR(74);
		Children[72] = PDEF_PTR(75);
		Children[73] = PDEF_PTR(76);
		Children[74] = PDEF_PTR(77);
		Children[75] = PDEF_PTR(78);
		Children[76] = PDEF_PTR(79);
		Children[77] = PDEF_PTR(80);
		Children[78] = PDEF_PTR(81);
		Children[79] = PDEF_PTR(82);
		Children[80] = PDEF_PTR(83);
		Children[81] = PDEF_PTR(84);
		Children[82] = PDEF_PTR(85);
		Children[83] = PDEF_PTR(86);
		Children[84] = PDEF_PTR(87);
		Children[85] = PDEF_PTR(88);
		Children[86] = PDEF_PTR(89);
		Children[87] = PDEF_PTR(90);
		Children[88] = PDEF_PTR(91);
		Children[89] = PDEF_PTR(92);
		Children[90] = PDEF_PTR(93);
		Children[91] = PDEF_PTR(94);
		Children[92] = PDEF_PTR(95);
		Children[93] = PDEF_PTR(96);
		Children[94] = PDEF_PTR(97);
		Children[95] = PDEF_PTR(98);
		Children[96] = PDEF_PTR(99);
		Children[97] = PDEF_PTR(100);
		Children[98] = PDEF_PTR(101);
		Children[99] = PDEF_PTR(102);
		Children[100] = PDEF_PTR(103);
		Children[101] = PDEF_PTR(104);
		Children[102] = PDEF_PTR(105);
		Children[103] = PDEF_PTR(106);
		Children[104] = PDEF_PTR(107);
		Children[105] = PDEF_PTR(108);
		Children[106] = PDEF_PTR(109);
		Children[107] = PDEF_PTR(110);
		Children[108] = PDEF_PTR(111);
		Children[109] = PDEF_PTR(112);
		Children[110] = PDEF_PTR(113);
		Children[111] = PDEF_PTR(114);
		Children[112] = PDEF_PTR(115);
		Children[113] = PDEF_PTR(116);
		Children[114] = PDEF_PTR(117);
		Children[115] = PDEF_PTR(118);
		Children[116] = PDEF_PTR(119);
		Children[117] = PDEF_PTR(120);
		Children[118] = PDEF_PTR(121);
		Children[119] = PDEF_PTR(122);
		Children[120] = PDEF_PTR(123);
		Children[121] = PDEF_PTR(124);
		Children[122] = PDEF_PTR(125);
		Children[123] = PDEF_PTR(126);
		Children[124] = PDEF_PTR(127);
		Children[125] = PDEF_PTR(128);
		Children[126] = PDEF_PTR(129);
		Children[127] = PDEF_PTR(130);
		Children[128] = PDEF_PTR(131);
		Children[129] = PDEF_PTR(132);
		Children[130] = PDEF_PTR(133);
		Children[131] = PDEF_PTR(134);
		Children[132] = PDEF_PTR(135);

		ParamDefTable[2].setChildren(Children, 133);
	}

	mBuiltFlag = true;

}
void HairInstanceDescriptor::initStrings(void)
{
}

void HairInstanceDescriptor::initDynamicArrays(void)
{
	materials.buf = NULL;
	materials.isAllocated = true;
	materials.elementSize = sizeof(Material_Type);
	materials.arraySizes[0] = 0;
}

void HairInstanceDescriptor::initDefaults(void)
{

	freeStrings();
	freeReferences();
	freeDynamicArrays();

	initDynamicArrays();
	initStrings();
	initReferences();
}

void HairInstanceDescriptor::initReferences(void)
{
}

void HairInstanceDescriptor::freeDynamicArrays(void)
{
	if (materials.isAllocated && materials.buf)
	{
		mParameterizedTraits->free(materials.buf);
	}
}

void HairInstanceDescriptor::freeStrings(void)
{

	for (int i = 0; i < materials.arraySizes[0]; ++i)
	{
		if (materials.buf[i].name.isAllocated && materials.buf[i].name.buf)
		{
			mParameterizedTraits->strfree((char*)materials.buf[i].name.buf);
		}
	}
}

void HairInstanceDescriptor::freeReferences(void)
{
}

} // namespace parameterized
} // namespace nvidia
