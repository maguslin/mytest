// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "../../../../Source/Runtime/Projects/Public/Interfaces/IPluginManager.h"
#include "testHairWorks.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1testHairWorks() {}
	void UHairworksAsset::StaticRegisterNativesUHairworksAsset()
	{
	}
	IMPLEMENT_CLASS(UHairworksAsset, 4069812525);
	void UHairworksFactory::StaticRegisterNativesUHairworksFactory()
	{
	}
	IMPLEMENT_CLASS(UHairworksFactory, 3690619578);
static class UEnum* EHairWorksColorizeMode_StaticEnum()
{
	extern TESTHAIRWORKS_API class UPackage* Z_Construct_UPackage__Script_testHairWorks();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern TESTHAIRWORKS_API class UEnum* Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode, Z_Construct_UPackage__Script_testHairWorks(), TEXT("EHairWorksColorizeMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EHairWorksColorizeMode(EHairWorksColorizeMode_StaticEnum, TEXT("/Script/testHairWorks"), TEXT("EHairWorksColorizeMode"), false, nullptr, nullptr);
static class UEnum* EHairWorksStrandBlendMode_StaticEnum()
{
	extern TESTHAIRWORKS_API class UPackage* Z_Construct_UPackage__Script_testHairWorks();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern TESTHAIRWORKS_API class UEnum* Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode, Z_Construct_UPackage__Script_testHairWorks(), TEXT("EHairWorksStrandBlendMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EHairWorksStrandBlendMode(EHairWorksStrandBlendMode_StaticEnum, TEXT("/Script/testHairWorks"), TEXT("EHairWorksStrandBlendMode"), false, nullptr, nullptr);
class UScriptStruct* FHairWorksPin::StaticStruct()
{
	extern TESTHAIRWORKS_API class UPackage* Z_Construct_UPackage__Script_testHairWorks();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TESTHAIRWORKS_API class UScriptStruct* Z_Construct_UScriptStruct_FHairWorksPin();
		extern TESTHAIRWORKS_API uint32 Get_Z_Construct_UScriptStruct_FHairWorksPin_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FHairWorksPin, Z_Construct_UPackage__Script_testHairWorks(), TEXT("HairWorksPin"), sizeof(FHairWorksPin), Get_Z_Construct_UScriptStruct_FHairWorksPin_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FHairWorksPin(FHairWorksPin::StaticStruct, TEXT("/Script/testHairWorks"), TEXT("HairWorksPin"), false, nullptr, nullptr);
static struct FScriptStruct_testHairWorks_StaticRegisterNativesFHairWorksPin
{
	FScriptStruct_testHairWorks_StaticRegisterNativesFHairWorksPin()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("HairWorksPin")),new UScriptStruct::TCppStructOps<FHairWorksPin>);
	}
} ScriptStruct_testHairWorks_StaticRegisterNativesFHairWorksPin;
	void UHairworksMaterial::StaticRegisterNativesUHairworksMaterial()
	{
	}
	IMPLEMENT_CLASS(UHairworksMaterial, 915876807);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	UNREALED_API class UClass* Z_Construct_UClass_UFactory();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();

	TESTHAIRWORKS_API class UClass* Z_Construct_UClass_UHairworksAsset_NoRegister();
	TESTHAIRWORKS_API class UClass* Z_Construct_UClass_UHairworksAsset();
	TESTHAIRWORKS_API class UClass* Z_Construct_UClass_UHairworksFactory_NoRegister();
	TESTHAIRWORKS_API class UClass* Z_Construct_UClass_UHairworksFactory();
	TESTHAIRWORKS_API class UEnum* Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode();
	TESTHAIRWORKS_API class UEnum* Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode();
	TESTHAIRWORKS_API class UScriptStruct* Z_Construct_UScriptStruct_FHairWorksPin();
	TESTHAIRWORKS_API class UClass* Z_Construct_UClass_UHairworksMaterial_NoRegister();
	TESTHAIRWORKS_API class UClass* Z_Construct_UClass_UHairworksMaterial();
	TESTHAIRWORKS_API class UPackage* Z_Construct_UPackage__Script_testHairWorks();
	UClass* Z_Construct_UClass_UHairworksAsset_NoRegister()
	{
		return UHairworksAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UHairworksAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_testHairWorks();
			OuterClass = UHairworksAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BoneNames = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneNames"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoneNames, UHairworksAsset), 0x0010000000000000);
				UProperty* NewProp_BoneNames_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneNames, TEXT("BoneNames"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_AssetData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AssetData, UHairworksAsset), 0x0010000000000000);
				UProperty* NewProp_AssetData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AssetData, TEXT("AssetData"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_HairMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HairMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(HairMaterial, UHairworksAsset), 0x00120000000a001d, Z_Construct_UClass_UHairworksMaterial_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollisions, UHairworksAsset, bool);
				UProperty* NewProp_bCollisions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollisions"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollisions, UHairworksAsset), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bCollisions, UHairworksAsset), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTextures, UHairworksAsset, bool);
				UProperty* NewProp_bTextures = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTextures"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTextures, UHairworksAsset), 0x0010000000020001, CPP_BOOL_PROPERTY_BITMASK(bTextures, UHairworksAsset), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bConstraints, UHairworksAsset, bool);
				UProperty* NewProp_bConstraints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bConstraints"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bConstraints, UHairworksAsset), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bConstraints, UHairworksAsset), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMaterials, UHairworksAsset, bool);
				UProperty* NewProp_bMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMaterials, UHairworksAsset), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bMaterials, UHairworksAsset), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGroom, UHairworksAsset, bool);
				UProperty* NewProp_bGroom = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGroom"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGroom, UHairworksAsset), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bGroom, UHairworksAsset), sizeof(bool), true);
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UHairworksAsset), 0x00120008000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UHairworksAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_BoneNames, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_AssetData, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_HairMaterial, TEXT("Category"), TEXT("Hair"));
				MetaData->SetValue(NewProp_HairMaterial, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_HairMaterial, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_bCollisions, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_bCollisions, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_bTextures, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_bTextures, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_bConstraints, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_bConstraints, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_bMaterials, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_bMaterials, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_bGroom, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_bGroom, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksAsset.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ToolTip"), TEXT("Importing data and options used for this HairWorks asset"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHairworksAsset(Z_Construct_UClass_UHairworksAsset, &UHairworksAsset::StaticClass, TEXT("UHairworksAsset"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHairworksAsset);
	UClass* Z_Construct_UClass_UHairworksFactory_NoRegister()
	{
		return UHairworksFactory::StaticClass();
	}
	UClass* Z_Construct_UClass_UHairworksFactory()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFactory();
			Z_Construct_UPackage__Script_testHairWorks();
			OuterClass = UHairworksFactory::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("HairworksFactory.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/HairworksFactory.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHairworksFactory(Z_Construct_UClass_UHairworksFactory, &UHairworksFactory::StaticClass, TEXT("UHairworksFactory"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHairworksFactory);
	UEnum* Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_testHairWorks();
		extern uint32 Get_Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EHairWorksColorizeMode"), 0, Get_Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EHairWorksColorizeMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksColorizeMode::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksColorizeMode::Lod")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksColorizeMode::Tangents")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksColorizeMode::Normal")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksColorizeMode::EHairWorksColorizeMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EHairWorksColorizeMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode_CRC() { return 1902965377U; }
	UEnum* Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_testHairWorks();
		extern uint32 Get_Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EHairWorksStrandBlendMode"), 0, Get_Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EHairWorksStrandBlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksStrandBlendMode::Overwrite")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksStrandBlendMode::Multiply")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksStrandBlendMode::Add")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksStrandBlendMode::Modulate")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHairWorksStrandBlendMode::EHairWorksStrandBlendMode_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EHairWorksStrandBlendMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Add.ToolTip"), TEXT("Add strand color on top of base color."));
			MetaData->SetValue(ReturnEnum, TEXT("Modulate.ToolTip"), TEXT("Add/subtract strand color to/from base color."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Multiply.ToolTip"), TEXT("Multiply strand texture to base color (root/tip)."));
			MetaData->SetValue(ReturnEnum, TEXT("Overwrite.ToolTip"), TEXT("Overwrite with strand texture."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode_CRC() { return 1293225100U; }
	UScriptStruct* Z_Construct_UScriptStruct_FHairWorksPin()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_testHairWorks();
		extern uint32 Get_Z_Construct_UScriptStruct_FHairWorksPin_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("HairWorksPin"), sizeof(FHairWorksPin), Get_Z_Construct_UScriptStruct_FHairWorksPin_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HairWorksPin"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FHairWorksPin>, EStructFlags(0x00000001));
			UProperty* NewProp_InfluenceFallOffCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InfluenceFallOffCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InfluenceFallOffCurve, FHairWorksPin), 0x0010000000000005, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_InfluenceFallOff = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InfluenceFallOff"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InfluenceFallOff, FHairWorksPin), 0x0010000000000005);
			UProperty* NewProp_Stiffness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Stiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Stiffness, FHairWorksPin), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTetherPin, FHairWorksPin, bool);
			UProperty* NewProp_bTetherPin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTetherPin"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTetherPin, FHairWorksPin), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bTetherPin, FHairWorksPin), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDynamicPin, FHairWorksPin, bool);
			UProperty* NewProp_bDynamicPin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bDynamicPin"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDynamicPin, FHairWorksPin), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDynamicPin, FHairWorksPin), sizeof(bool), true);
			UProperty* NewProp_Bone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bone"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Bone, FHairWorksPin), 0x0010000000020015);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(NewProp_InfluenceFallOffCurve, TEXT("Category"), TEXT("Physical|Pin"));
			MetaData->SetValue(NewProp_InfluenceFallOffCurve, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(NewProp_InfluenceFallOff, TEXT("Category"), TEXT("Physical|Pin"));
			MetaData->SetValue(NewProp_InfluenceFallOff, TEXT("ClampMax"), TEXT("1"));
			MetaData->SetValue(NewProp_InfluenceFallOff, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_InfluenceFallOff, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("Category"), TEXT("Physical|Pin"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("ClampMax"), TEXT("1"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("ClampMin"), TEXT("0"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(NewProp_bTetherPin, TEXT("Category"), TEXT("Physical|Pin"));
			MetaData->SetValue(NewProp_bTetherPin, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(NewProp_bDynamicPin, TEXT("Category"), TEXT("Physical|Pin"));
			MetaData->SetValue(NewProp_bDynamicPin, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
			MetaData->SetValue(NewProp_Bone, TEXT("Category"), TEXT("Physical|Pin"));
			MetaData->SetValue(NewProp_Bone, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHairWorksPin_CRC() { return 566122122U; }
	UClass* Z_Construct_UClass_UHairworksMaterial_NoRegister()
	{
		return UHairworksMaterial::StaticClass();
	}
	UClass* Z_Construct_UClass_UHairworksMaterial()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_testHairWorks();
			OuterClass = UHairworksMaterial::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DetailLodBaseDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailLodBaseDensityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DetailLodBaseDensityScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DetailLodBaseWidthScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailLodBaseWidthScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DetailLodBaseWidthScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DetailLodEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailLodEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DetailLodEnd, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DetailLodStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetailLodStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DetailLodStart, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDetailLodEnable, UHairworksMaterial, bool);
				UProperty* NewProp_bDetailLodEnable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDetailLodEnable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDetailLodEnable, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDetailLodEnable, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_DistanceLodBaseDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceLodBaseDensityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceLodBaseDensityScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DistanceLodBaseWidthScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceLodBaseWidthScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceLodBaseWidthScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_FadeStartDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FadeStartDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FadeStartDistance, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DistanceLodEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceLodEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceLodEnd, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DistanceLodStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DistanceLodStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceLodStart, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDistanceLodEnable, UHairworksMaterial, bool);
				UProperty* NewProp_bDistanceLodEnable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDistanceLodEnable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDistanceLodEnable, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDistanceLodEnable, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_BackfaceCullingThreshold = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackfaceCullingThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BackfaceCullingThreshold, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBackfaceCulling, UHairworksMaterial, bool);
				UProperty* NewProp_bBackfaceCulling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBackfaceCulling"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBackfaceCulling, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bBackfaceCulling, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bViewFrustumCulling, UHairworksMaterial, bool);
				UProperty* NewProp_bViewFrustumCulling = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bViewFrustumCulling"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bViewFrustumCulling, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bViewFrustumCulling, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReceiveShadows, UHairworksMaterial, bool);
				UProperty* NewProp_bReceiveShadows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReceiveShadows"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReceiveShadows, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bReceiveShadows, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCastShadows, UHairworksMaterial, bool);
				UProperty* NewProp_bCastShadows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCastShadows"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCastShadows, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCastShadows, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_ShadowDensityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowDensityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ShadowDensityScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_ShadowAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowAttenuation"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ShadowAttenuation, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_GlintPowerExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlintPowerExponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlintPowerExponent, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_GlintSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlintSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlintSize, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_GlintStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlintStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GlintStrength, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_SecondaryOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SecondaryOffset, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_SecondaryShininess = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryShininess"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SecondaryShininess, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_SecondaryScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SecondaryScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_PrimaryBreakup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryBreakup"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PrimaryBreakup, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_PrimaryShininess = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryShininess"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PrimaryShininess, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_PrimaryScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PrimaryScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_SpecularColorMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpecularColorMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpecularColorMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_SpecularColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpecularColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SpecularColor, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_HairNormalCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HairNormalCenter"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(HairNormalCenter, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_HairNormalWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HairNormalWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HairNormalWeight, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_DiffuseBlend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DiffuseBlend"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DiffuseBlend, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StrandBlendScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrandBlendScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StrandBlendScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StrandBlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StrandBlendMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(StrandBlendMode, UHairworksMaterial), 0x0010000000000005, Z_Construct_UEnum_testHairWorks_EHairWorksStrandBlendMode());
				UProperty* NewProp_PerStrandTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PerStrandTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PerStrandTexture, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_RootAlphaFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootAlphaFalloff"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RootAlphaFalloff, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_RootTipColorFalloff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootTipColorFalloff"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RootTipColorFalloff, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_RootTipColorWeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootTipColorWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RootTipColorWeight, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_TipColorMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TipColorMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TipColorMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_TipColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TipColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TipColor, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_RootColorMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootColorMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RootColorMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_RootColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RootColor, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_WavinessRootStraigthen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessRootStraigthen"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessRootStraigthen, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WavinessFreqNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessFreqNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessFreqNoise, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WavinessFreqMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessFreqMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WavinessFreqMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WavinessFreq = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessFreq"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessFreq, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WavinessScaleClump = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessScaleClump"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessScaleClump, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WavinessScaleStrand = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessScaleStrand"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessScaleStrand, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WavinessScaleNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessScaleNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessScaleNoise, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WavinessScaleMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessScaleMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WavinessScaleMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WavinessScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavinessScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WavinessScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_ClumpingNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClumpingNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ClumpingNoise, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_ClumpingRoundnessMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClumpingRoundnessMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ClumpingRoundnessMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_ClumpingRoundness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClumpingRoundness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ClumpingRoundness, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_ClumpingScaleMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClumpingScaleMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ClumpingScaleMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_ClumpingScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClumpingScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ClumpingScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WidthNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WidthNoise, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WidthTipScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthTipScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WidthTipScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WidthRootScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthRootScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WidthRootScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WidthScaleMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthScaleMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WidthScaleMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_WidthScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WidthScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_LengthNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LengthNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LengthNoise, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_LengthScaleMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LengthScaleMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LengthScaleMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_LengthScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LengthScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(LengthScale, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUsePixelDensity, UHairworksMaterial, bool);
				UProperty* NewProp_bUsePixelDensity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUsePixelDensity"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUsePixelDensity, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bUsePixelDensity, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_DensityMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DensityMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(DensityMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_Density = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Density"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Density, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_Pins = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pins"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Pins, UHairworksMaterial), 0x0010000000000045);
				UProperty* NewProp_Pins_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Pins, TEXT("Pins"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FHairWorksPin());
				UProperty* NewProp_StiffnessInteractionCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessInteractionCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StiffnessInteractionCurve, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_StiffnessInteraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessInteraction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessInteraction, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCapsuleCollision, UHairworksMaterial, bool);
				UProperty* NewProp_bCapsuleCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCapsuleCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCapsuleCollision, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCapsuleCollision, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_Friction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Friction"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Friction, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_Backstop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Backstop"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Backstop, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StiffnessBendCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessBendCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StiffnessBendCurve, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_StiffnessBend = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessBend"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessBend, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StiffnessTip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessTip"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessTip, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StiffnessRootMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessRootMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(StiffnessRootMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_StiffnessRoot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessRoot"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessRoot, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StiffnessDampingCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessDampingCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StiffnessDampingCurve, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_StiffnessDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessDamping, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StiffnessStrengthCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessStrengthCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StiffnessStrengthCurve, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_StiffnessStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessStrength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessStrength, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_StiffnessGlobalCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessGlobalCurve"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StiffnessGlobalCurve, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FVector4());
				UProperty* NewProp_StiffnessGlobalMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessGlobalMap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(StiffnessGlobalMap, UHairworksMaterial), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_StiffnessGlobal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StiffnessGlobal"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(StiffnessGlobal, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WindNoise = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindNoise"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WindNoise, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_Wind = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Wind"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Wind, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_WindDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WindDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WindDirection, UHairworksMaterial), 0x0010000000000005, Z_Construct_UScriptStruct_FRotator());
				UProperty* NewProp_InertiaLimit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InertiaLimit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InertiaLimit, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_InertiaScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InertiaScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InertiaScale, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_Damping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Damping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Damping, UHairworksMaterial), 0x0010000000000005);
				UProperty* NewProp_MassScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MassScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MassScale, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulate, UHairworksMaterial, bool);
				UProperty* NewProp_bSimulate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSimulate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulate, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bSimulate, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_SplineMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SplineMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SplineMultiplier, UHairworksMaterial), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnable, UHairworksMaterial, bool);
				UProperty* NewProp_bEnable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnable, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnable, UHairworksMaterial), sizeof(bool), true);
				UProperty* NewProp_ColorizeOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorizeOptions"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ColorizeOptions, UHairworksMaterial), 0x0010000000000005, Z_Construct_UEnum_testHairWorks_EHairWorksColorizeMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShadingNormalCenter, UHairworksMaterial, bool);
				UProperty* NewProp_bShadingNormalCenter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShadingNormalCenter"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShadingNormalCenter, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bShadingNormalCenter, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShadingNormal, UHairworksMaterial, bool);
				UProperty* NewProp_bShadingNormal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShadingNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShadingNormal, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bShadingNormal, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPinConstraints, UHairworksMaterial, bool);
				UProperty* NewProp_bPinConstraints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPinConstraints"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPinConstraints, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bPinConstraints, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHairInteraction, UHairworksMaterial, bool);
				UProperty* NewProp_bHairInteraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHairInteraction"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHairInteraction, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bHairInteraction, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCollisionCapsules, UHairworksMaterial, bool);
				UProperty* NewProp_bCollisionCapsules = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCollisionCapsules"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCollisionCapsules, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCollisionCapsules, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBoundingBox, UHairworksMaterial, bool);
				UProperty* NewProp_bBoundingBox = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBoundingBox"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBoundingBox, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bBoundingBox, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBones, UHairworksMaterial, bool);
				UProperty* NewProp_bBones = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bBones"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBones, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bBones, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGrowthMesh, UHairworksMaterial, bool);
				UProperty* NewProp_bGrowthMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGrowthMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGrowthMesh, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bGrowthMesh, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bControlPoints, UHairworksMaterial, bool);
				UProperty* NewProp_bControlPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bControlPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bControlPoints, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bControlPoints, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSkinnedGuideCurves, UHairworksMaterial, bool);
				UProperty* NewProp_bSkinnedGuideCurves = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSkinnedGuideCurves"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSkinnedGuideCurves, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bSkinnedGuideCurves, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGuideCurves, UHairworksMaterial, bool);
				UProperty* NewProp_bGuideCurves = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGuideCurves"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGuideCurves, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bGuideCurves, UHairworksMaterial), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHair, UHairworksMaterial, bool);
				UProperty* NewProp_bHair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHair"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHair, UHairworksMaterial), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bHair, UHairworksMaterial), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UHairworksMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("HairWorksMaterial represents physical and graphics attributes of a hair."));
				MetaData->SetValue(NewProp_DetailLodBaseDensityScale, TEXT("Category"), TEXT("LevelOfDetail|DetailLOD"));
				MetaData->SetValue(NewProp_DetailLodBaseDensityScale, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_DetailLodBaseDensityScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DetailLodBaseDensityScale, TEXT("DisplayName"), TEXT("Base Density Scale"));
				MetaData->SetValue(NewProp_DetailLodBaseDensityScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DetailLodBaseDensityScale, TEXT("ToolTip"), TEXT("Density scale when closeup LOD is in action.  hairDensity gets scaled based on LOD factor."));
				MetaData->SetValue(NewProp_DetailLodBaseWidthScale, TEXT("Category"), TEXT("LevelOfDetail|DetailLOD"));
				MetaData->SetValue(NewProp_DetailLodBaseWidthScale, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_DetailLodBaseWidthScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DetailLodBaseWidthScale, TEXT("DisplayName"), TEXT("Base Width Scale"));
				MetaData->SetValue(NewProp_DetailLodBaseWidthScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DetailLodBaseWidthScale, TEXT("ToolTip"), TEXT("Hair width that can change when close up density is triggered by closeup LOD mechanism."));
				MetaData->SetValue(NewProp_DetailLodEnd, TEXT("Category"), TEXT("LevelOfDetail|DetailLOD"));
				MetaData->SetValue(NewProp_DetailLodEnd, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DetailLodEnd, TEXT("DisplayName"), TEXT("End Distance"));
				MetaData->SetValue(NewProp_DetailLodEnd, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DetailLodEnd, TEXT("ToolTip"), TEXT("Distance (in scene unit) to camera where fur will get full closeup density value."));
				MetaData->SetValue(NewProp_DetailLodStart, TEXT("Category"), TEXT("LevelOfDetail|DetailLOD"));
				MetaData->SetValue(NewProp_DetailLodStart, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DetailLodStart, TEXT("DisplayName"), TEXT("Start Distance"));
				MetaData->SetValue(NewProp_DetailLodStart, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DetailLodStart, TEXT("ToolTip"), TEXT("Distance (in scene unit) to camera where fur will start getting denser toward closeup density."));
				MetaData->SetValue(NewProp_bDetailLodEnable, TEXT("Category"), TEXT("LevelOfDetail|DetailLOD"));
				MetaData->SetValue(NewProp_bDetailLodEnable, TEXT("DisplayName"), TEXT("Enable"));
				MetaData->SetValue(NewProp_bDetailLodEnable, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bDetailLodEnable, TEXT("ToolTip"), TEXT("Whether to enable LOD for close object (detail LOD)."));
				MetaData->SetValue(NewProp_DistanceLodBaseDensityScale, TEXT("Category"), TEXT("LevelOfDetail|DistanceLOD"));
				MetaData->SetValue(NewProp_DistanceLodBaseDensityScale, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_DistanceLodBaseDensityScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DistanceLodBaseDensityScale, TEXT("DisplayName"), TEXT("Base Density Scale"));
				MetaData->SetValue(NewProp_DistanceLodBaseDensityScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DistanceLodBaseDensityScale, TEXT("ToolTip"), TEXT("Density when distance LOD is in action. hairDensity gets scaled based on LOD factor."));
				MetaData->SetValue(NewProp_DistanceLodBaseWidthScale, TEXT("Category"), TEXT("LevelOfDetail|DistanceLOD"));
				MetaData->SetValue(NewProp_DistanceLodBaseWidthScale, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_DistanceLodBaseWidthScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DistanceLodBaseWidthScale, TEXT("DisplayName"), TEXT("Base Width Scale"));
				MetaData->SetValue(NewProp_DistanceLodBaseWidthScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DistanceLodBaseWidthScale, TEXT("ToolTip"), TEXT("Hair width that can change when close up density is triggered by closeup LOD mechanism."));
				MetaData->SetValue(NewProp_FadeStartDistance, TEXT("Category"), TEXT("LevelOfDetail|DistanceLOD"));
				MetaData->SetValue(NewProp_FadeStartDistance, TEXT("ClampMax"), TEXT("1000"));
				MetaData->SetValue(NewProp_FadeStartDistance, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_FadeStartDistance, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_FadeStartDistance, TEXT("ToolTip"), TEXT("Distance (in scene unit) to camera where fur will fade with alpha from 1 (this distance) to 0 (DistanceLODEnd)."));
				MetaData->SetValue(NewProp_DistanceLodEnd, TEXT("Category"), TEXT("LevelOfDetail|DistanceLOD"));
				MetaData->SetValue(NewProp_DistanceLodEnd, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DistanceLodEnd, TEXT("DisplayName"), TEXT("End Distance"));
				MetaData->SetValue(NewProp_DistanceLodEnd, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DistanceLodEnd, TEXT("ToolTip"), TEXT("Distance (in scene unit) to camera where fur will completely disappear (and stop simulating)."));
				MetaData->SetValue(NewProp_DistanceLodStart, TEXT("Category"), TEXT("LevelOfDetail|DistanceLOD"));
				MetaData->SetValue(NewProp_DistanceLodStart, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DistanceLodStart, TEXT("DisplayName"), TEXT("Start Distance"));
				MetaData->SetValue(NewProp_DistanceLodStart, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DistanceLodStart, TEXT("ToolTip"), TEXT("Distance (in scene unit) to camera where fur will start fading out (by reducing density)."));
				MetaData->SetValue(NewProp_bDistanceLodEnable, TEXT("Category"), TEXT("LevelOfDetail|DistanceLOD"));
				MetaData->SetValue(NewProp_bDistanceLodEnable, TEXT("DisplayName"), TEXT("Enable"));
				MetaData->SetValue(NewProp_bDistanceLodEnable, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bDistanceLodEnable, TEXT("ToolTip"), TEXT("Whether to enable LOD for far away object (distance LOD)"));
				MetaData->SetValue(NewProp_BackfaceCullingThreshold, TEXT("Category"), TEXT("LevelOfDetail|Culling"));
				MetaData->SetValue(NewProp_BackfaceCullingThreshold, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_BackfaceCullingThreshold, TEXT("ClampMin"), TEXT("-1"));
				MetaData->SetValue(NewProp_BackfaceCullingThreshold, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_BackfaceCullingThreshold, TEXT("ToolTip"), TEXT("Threshold to determine back face, note that this value should be slightly smaller 0 to avoid hairs at the silhouette from disappearing."));
				MetaData->SetValue(NewProp_bBackfaceCulling, TEXT("Category"), TEXT("LevelOfDetail|Culling"));
				MetaData->SetValue(NewProp_bBackfaceCulling, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bBackfaceCulling, TEXT("ToolTip"), TEXT("When this is on, density for hairs growing from back-facing faces will be set to 0."));
				MetaData->SetValue(NewProp_bViewFrustumCulling, TEXT("Category"), TEXT("LevelOfDetail|Culling"));
				MetaData->SetValue(NewProp_bViewFrustumCulling, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bViewFrustumCulling, TEXT("ToolTip"), TEXT("When this is on, density for hairs outside view are set to 0. Use this option when fur is in a closeup."));
				MetaData->SetValue(NewProp_bReceiveShadows, TEXT("Category"), TEXT("Graphics|Shadow"));
				MetaData->SetValue(NewProp_bReceiveShadows, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bCastShadows, TEXT("Category"), TEXT("Graphics|Shadow"));
				MetaData->SetValue(NewProp_bCastShadows, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ShadowDensityScale, TEXT("Category"), TEXT("Graphics|Shadow"));
				MetaData->SetValue(NewProp_ShadowDensityScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_ShadowDensityScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ShadowDensityScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ShadowDensityScale, TEXT("ToolTip"), TEXT("Density scale factor to reduce hair density for shadow map rendering."));
				MetaData->SetValue(NewProp_ShadowAttenuation, TEXT("Category"), TEXT("Graphics|Shadow"));
				MetaData->SetValue(NewProp_ShadowAttenuation, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_ShadowAttenuation, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ShadowAttenuation, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ShadowAttenuation, TEXT("ToolTip"), TEXT("Distance through hair volume beyond which hairs get completely shadowed."));
				MetaData->SetValue(NewProp_GlintPowerExponent, TEXT("Category"), TEXT("Graphics|Glint"));
				MetaData->SetValue(NewProp_GlintPowerExponent, TEXT("ClampMax"), TEXT("16"));
				MetaData->SetValue(NewProp_GlintPowerExponent, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_GlintPowerExponent, TEXT("DisplayName"), TEXT("Power Exponent"));
				MetaData->SetValue(NewProp_GlintPowerExponent, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_GlintPowerExponent, TEXT("ToolTip"), TEXT("Glint power exponent."));
				MetaData->SetValue(NewProp_GlintSize, TEXT("Category"), TEXT("Graphics|Glint"));
				MetaData->SetValue(NewProp_GlintSize, TEXT("ClampMax"), TEXT("1024"));
				MetaData->SetValue(NewProp_GlintSize, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_GlintSize, TEXT("DisplayName"), TEXT("Size"));
				MetaData->SetValue(NewProp_GlintSize, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_GlintSize, TEXT("ToolTip"), TEXT("Number of glint sparklers along each hair."));
				MetaData->SetValue(NewProp_GlintStrength, TEXT("Category"), TEXT("Graphics|Glint"));
				MetaData->SetValue(NewProp_GlintStrength, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_GlintStrength, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_GlintStrength, TEXT("DisplayName"), TEXT("Strength"));
				MetaData->SetValue(NewProp_GlintStrength, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_GlintStrength, TEXT("ToolTip"), TEXT("Strength of the glint noise."));
				MetaData->SetValue(NewProp_SecondaryOffset, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_SecondaryOffset, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_SecondaryOffset, TEXT("ClampMin"), TEXT("-1"));
				MetaData->SetValue(NewProp_SecondaryOffset, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_SecondaryOffset, TEXT("ToolTip"), TEXT("Secondary highlight shift offset along tangents."));
				MetaData->SetValue(NewProp_SecondaryShininess, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_SecondaryShininess, TEXT("ClampMax"), TEXT("1000"));
				MetaData->SetValue(NewProp_SecondaryShininess, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_SecondaryShininess, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_SecondaryShininess, TEXT("ToolTip"), TEXT("Secondary specular power exponent"));
				MetaData->SetValue(NewProp_SecondaryScale, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_SecondaryScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_SecondaryScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_SecondaryScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_SecondaryScale, TEXT("ToolTip"), TEXT("Secondary specular factor."));
				MetaData->SetValue(NewProp_PrimaryBreakup, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_PrimaryBreakup, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_PrimaryBreakup, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_PrimaryBreakup, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_PrimaryBreakup, TEXT("ToolTip"), TEXT("Shift factor to make specular highlight move with noise."));
				MetaData->SetValue(NewProp_PrimaryShininess, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_PrimaryShininess, TEXT("ClampMax"), TEXT("1000"));
				MetaData->SetValue(NewProp_PrimaryShininess, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_PrimaryShininess, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_PrimaryShininess, TEXT("ToolTip"), TEXT("Primary specular power exponent."));
				MetaData->SetValue(NewProp_PrimaryScale, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_PrimaryScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_PrimaryScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_PrimaryScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_PrimaryScale, TEXT("ToolTip"), TEXT("Primary specular factor."));
				MetaData->SetValue(NewProp_SpecularColorMap, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_SpecularColorMap, TEXT("DisplayName"), TEXT("Color Map"));
				MetaData->SetValue(NewProp_SpecularColorMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_SpecularColorMap, TEXT("ToolTip"), TEXT("Color map for specular color."));
				MetaData->SetValue(NewProp_SpecularColor, TEXT("Category"), TEXT("Graphics|Specular"));
				MetaData->SetValue(NewProp_SpecularColor, TEXT("DisplayName"), TEXT("Color"));
				MetaData->SetValue(NewProp_SpecularColor, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_SpecularColor, TEXT("ToolTip"), TEXT("Specular color."));
				MetaData->SetValue(NewProp_HairNormalCenter, TEXT("Category"), TEXT("Graphics|Diffuse"));
				MetaData->SetValue(NewProp_HairNormalCenter, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_HairNormalCenter, TEXT("ToolTip"), TEXT("Name for the bone which we use as model center for diffuse shading purpose."));
				MetaData->SetValue(NewProp_HairNormalWeight, TEXT("Category"), TEXT("Graphics|Diffuse"));
				MetaData->SetValue(NewProp_HairNormalWeight, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_HairNormalWeight, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_HairNormalWeight, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_HairNormalWeight, TEXT("ToolTip"), TEXT("Blend factor between mesh normal vs hair normal. Use higher value for longer (surface like) hair."));
				MetaData->SetValue(NewProp_DiffuseBlend, TEXT("Category"), TEXT("Graphics|Diffuse"));
				MetaData->SetValue(NewProp_DiffuseBlend, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_DiffuseBlend, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_DiffuseBlend, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DiffuseBlend, TEXT("ToolTip"), TEXT("Blend factor between Kajiya hair lighting vs normal skin lighting."));
				MetaData->SetValue(NewProp_StrandBlendScale, TEXT("Category"), TEXT("Graphics|Strand"));
				MetaData->SetValue(NewProp_StrandBlendScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StrandBlendScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StrandBlendScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StrandBlendScale, TEXT("ToolTip"), TEXT("Scale strand texture before blend."));
				MetaData->SetValue(NewProp_StrandBlendMode, TEXT("Category"), TEXT("Graphics|Strand"));
				MetaData->SetValue(NewProp_StrandBlendMode, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StrandBlendMode, TEXT("ToolTip"), TEXT("When the strand texture is used, the blend mode determines how colors should combine between the strand texture and other color textures(root, tip, etc.)."));
				MetaData->SetValue(NewProp_PerStrandTexture, TEXT("Category"), TEXT("Graphics|Strand"));
				MetaData->SetValue(NewProp_PerStrandTexture, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_PerStrandTexture, TEXT("ToolTip"), TEXT("Texture along hair strand."));
				MetaData->SetValue(NewProp_RootAlphaFalloff, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_RootAlphaFalloff, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RootAlphaFalloff, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RootAlphaFalloff, TEXT("DisplayName"), TEXT("Root Alpha Falloff"));
				MetaData->SetValue(NewProp_RootAlphaFalloff, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_RootAlphaFalloff, TEXT("ToolTip"), TEXT("Falloff factor for alpha transition from root."));
				MetaData->SetValue(NewProp_RootTipColorFalloff, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_RootTipColorFalloff, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RootTipColorFalloff, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RootTipColorFalloff, TEXT("DisplayName"), TEXT("Root/Tip Color Falloff"));
				MetaData->SetValue(NewProp_RootTipColorFalloff, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_RootTipColorFalloff, TEXT("ToolTip"), TEXT("Falloff factor for root/tip color interpolation."));
				MetaData->SetValue(NewProp_RootTipColorWeight, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_RootTipColorWeight, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_RootTipColorWeight, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RootTipColorWeight, TEXT("DisplayName"), TEXT("Root/Tip Color Weight"));
				MetaData->SetValue(NewProp_RootTipColorWeight, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_RootTipColorWeight, TEXT("ToolTip"), TEXT("Blend factor between root and tip color in addition to hair length."));
				MetaData->SetValue(NewProp_TipColorMap, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_TipColorMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_TipColorMap, TEXT("ToolTip"), TEXT("Color map for tip color."));
				MetaData->SetValue(NewProp_TipColor, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_TipColor, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_TipColor, TEXT("ToolTip"), TEXT("Color of hair tip (when hair textures are not used)."));
				MetaData->SetValue(NewProp_RootColorMap, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_RootColorMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_RootColorMap, TEXT("ToolTip"), TEXT("Color map for root color."));
				MetaData->SetValue(NewProp_RootColor, TEXT("Category"), TEXT("Graphics|Color"));
				MetaData->SetValue(NewProp_RootColor, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_RootColor, TEXT("ToolTip"), TEXT("Color of hair root (when hair textures are not used)."));
				MetaData->SetValue(NewProp_WavinessRootStraigthen, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessRootStraigthen, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WavinessRootStraigthen, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WavinessRootStraigthen, TEXT("DisplayName"), TEXT("Root Straighten"));
				MetaData->SetValue(NewProp_WavinessRootStraigthen, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessRootStraigthen, TEXT("ToolTip"), TEXT("For some distance from the root, we attenuate waviness so that root itself does not move."));
				MetaData->SetValue(NewProp_WavinessFreqNoise, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessFreqNoise, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WavinessFreqNoise, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WavinessFreqNoise, TEXT("DisplayName"), TEXT("Frequency Noise"));
				MetaData->SetValue(NewProp_WavinessFreqNoise, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessFreqNoise, TEXT("ToolTip"), TEXT("Noise factor for the wave frequency."));
				MetaData->SetValue(NewProp_WavinessFreqMap, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessFreqMap, TEXT("DisplayName"), TEXT("Frequency Map"));
				MetaData->SetValue(NewProp_WavinessFreqMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessFreqMap, TEXT("ToolTip"), TEXT("Control map for waviness frequency."));
				MetaData->SetValue(NewProp_WavinessFreq, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessFreq, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_WavinessFreq, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_WavinessFreq, TEXT("DisplayName"), TEXT("Frequency"));
				MetaData->SetValue(NewProp_WavinessFreq, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessFreq, TEXT("ToolTip"), TEXT("Wave frequency (1.0 = one sine wave along hair length)."));
				MetaData->SetValue(NewProp_WavinessScaleClump, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessScaleClump, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WavinessScaleClump, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WavinessScaleClump, TEXT("DisplayName"), TEXT("Scale Clump"));
				MetaData->SetValue(NewProp_WavinessScaleClump, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessScaleClump, TEXT("ToolTip"), TEXT("Waviness at clump level."));
				MetaData->SetValue(NewProp_WavinessScaleStrand, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessScaleStrand, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WavinessScaleStrand, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WavinessScaleStrand, TEXT("DisplayName"), TEXT("Scale Strand"));
				MetaData->SetValue(NewProp_WavinessScaleStrand, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessScaleStrand, TEXT("ToolTip"), TEXT("Waviness at strand level."));
				MetaData->SetValue(NewProp_WavinessScaleNoise, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessScaleNoise, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WavinessScaleNoise, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WavinessScaleNoise, TEXT("DisplayName"), TEXT("Scale Noise"));
				MetaData->SetValue(NewProp_WavinessScaleNoise, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessScaleNoise, TEXT("ToolTip"), TEXT("Noise factor for the wave scale."));
				MetaData->SetValue(NewProp_WavinessScaleMap, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessScaleMap, TEXT("DisplayName"), TEXT("Scale Map"));
				MetaData->SetValue(NewProp_WavinessScaleMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessScaleMap, TEXT("ToolTip"), TEXT("Control map for waviness scale."));
				MetaData->SetValue(NewProp_WavinessScale, TEXT("Category"), TEXT("Style|Waviness"));
				MetaData->SetValue(NewProp_WavinessScale, TEXT("ClampMax"), TEXT("5"));
				MetaData->SetValue(NewProp_WavinessScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WavinessScale, TEXT("DisplayName"), TEXT("Scale"));
				MetaData->SetValue(NewProp_WavinessScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WavinessScale, TEXT("ToolTip"), TEXT("Size of waves for hair waviness."));
				MetaData->SetValue(NewProp_ClumpingNoise, TEXT("Category"), TEXT("Style|Clumping"));
				MetaData->SetValue(NewProp_ClumpingNoise, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_ClumpingNoise, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ClumpingNoise, TEXT("DisplayName"), TEXT("Noise"));
				MetaData->SetValue(NewProp_ClumpingNoise, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ClumpingNoise, TEXT("ToolTip"), TEXT("Probability of each hair gets clumped (0 = all hairs get clumped, 1 = clump scale is randomly distributed from 0 to 1)."));
				MetaData->SetValue(NewProp_ClumpingRoundnessMap, TEXT("Category"), TEXT("Style|Clumping"));
				MetaData->SetValue(NewProp_ClumpingRoundnessMap, TEXT("DisplayName"), TEXT("Roundness Map"));
				MetaData->SetValue(NewProp_ClumpingRoundnessMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ClumpingRoundnessMap, TEXT("ToolTip"), TEXT("Control map for clumping roundness."));
				MetaData->SetValue(NewProp_ClumpingRoundness, TEXT("Category"), TEXT("Style|Clumping"));
				MetaData->SetValue(NewProp_ClumpingRoundness, TEXT("ClampMax"), TEXT("2"));
				MetaData->SetValue(NewProp_ClumpingRoundness, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_ClumpingRoundness, TEXT("DisplayName"), TEXT("Roundness"));
				MetaData->SetValue(NewProp_ClumpingRoundness, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ClumpingRoundness, TEXT("ToolTip"), TEXT("Exponential factor to control roundness of clump shape (0 = linear cone, clump scale *= power(t, roundness), where t is normalized distance from the root)."));
				MetaData->SetValue(NewProp_ClumpingScaleMap, TEXT("Category"), TEXT("Style|Clumping"));
				MetaData->SetValue(NewProp_ClumpingScaleMap, TEXT("DisplayName"), TEXT("Scale Map"));
				MetaData->SetValue(NewProp_ClumpingScaleMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ClumpingScaleMap, TEXT("ToolTip"), TEXT("Control map for clumping scale."));
				MetaData->SetValue(NewProp_ClumpingScale, TEXT("Category"), TEXT("Style|Clumping"));
				MetaData->SetValue(NewProp_ClumpingScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_ClumpingScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ClumpingScale, TEXT("DisplayName"), TEXT("Scale"));
				MetaData->SetValue(NewProp_ClumpingScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_ClumpingScale, TEXT("ToolTip"), TEXT("How clumped each hair face is."));
				MetaData->SetValue(NewProp_WidthNoise, TEXT("Category"), TEXT("Style|StrandWidth"));
				MetaData->SetValue(NewProp_WidthNoise, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WidthNoise, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WidthNoise, TEXT("DisplayName"), TEXT("Noise"));
				MetaData->SetValue(NewProp_WidthNoise, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WidthNoise, TEXT("ToolTip"), TEXT("Noise factor for hair width noise."));
				MetaData->SetValue(NewProp_WidthTipScale, TEXT("Category"), TEXT("Style|StrandWidth"));
				MetaData->SetValue(NewProp_WidthTipScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WidthTipScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WidthTipScale, TEXT("DisplayName"), TEXT("Tip Scale"));
				MetaData->SetValue(NewProp_WidthTipScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WidthTipScale, TEXT("ToolTip"), TEXT("Scale factor for bottom side of the strand."));
				MetaData->SetValue(NewProp_WidthRootScale, TEXT("Category"), TEXT("Style|StrandWidth"));
				MetaData->SetValue(NewProp_WidthRootScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WidthRootScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WidthRootScale, TEXT("DisplayName"), TEXT("Root Scale"));
				MetaData->SetValue(NewProp_WidthRootScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WidthRootScale, TEXT("ToolTip"), TEXT("Scale factor for top side of the strand."));
				MetaData->SetValue(NewProp_WidthScaleMap, TEXT("Category"), TEXT("Style|StrandWidth"));
				MetaData->SetValue(NewProp_WidthScaleMap, TEXT("DisplayName"), TEXT("Width Map"));
				MetaData->SetValue(NewProp_WidthScaleMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WidthScaleMap, TEXT("ToolTip"), TEXT("Control map for hair width."));
				MetaData->SetValue(NewProp_WidthScale, TEXT("Category"), TEXT("Style|StrandWidth"));
				MetaData->SetValue(NewProp_WidthScale, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_WidthScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WidthScale, TEXT("DisplayName"), TEXT("Width"));
				MetaData->SetValue(NewProp_WidthScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WidthScale, TEXT("ToolTip"), TEXT("Hair width (thickness)."));
				MetaData->SetValue(NewProp_LengthNoise, TEXT("Category"), TEXT("Style|Volume"));
				MetaData->SetValue(NewProp_LengthNoise, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_LengthNoise, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_LengthNoise, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_LengthNoise, TEXT("ToolTip"), TEXT("Length variation noise."));
				MetaData->SetValue(NewProp_LengthScaleMap, TEXT("Category"), TEXT("Style|Volume"));
				MetaData->SetValue(NewProp_LengthScaleMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_LengthScaleMap, TEXT("ToolTip"), TEXT("Control map for length."));
				MetaData->SetValue(NewProp_LengthScale, TEXT("Category"), TEXT("Style|Volume"));
				MetaData->SetValue(NewProp_LengthScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_LengthScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_LengthScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_LengthScale, TEXT("ToolTip"), TEXT("Length control for growing hair effect."));
				MetaData->SetValue(NewProp_bUsePixelDensity, TEXT("Category"), TEXT("Style|Volume"));
				MetaData->SetValue(NewProp_bUsePixelDensity, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bUsePixelDensity, TEXT("ToolTip"), TEXT("Whether to use per-pixel sampling or per-vertex sampling for density map."));
				MetaData->SetValue(NewProp_DensityMap, TEXT("Category"), TEXT("Style|Volume"));
				MetaData->SetValue(NewProp_DensityMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_DensityMap, TEXT("ToolTip"), TEXT("Control map for density."));
				MetaData->SetValue(NewProp_Density, TEXT("Category"), TEXT("Style|Volume"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_Density, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Density, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_Density, TEXT("ToolTip"), TEXT("Hair density per face (1.0 = 64 hairs per face)."));
				MetaData->SetValue(NewProp_Pins, TEXT("Category"), TEXT("Physical|Pin"));
				MetaData->SetValue(NewProp_Pins, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessInteractionCurve, TEXT("Category"), TEXT("Physical|Collision"));
				MetaData->SetValue(NewProp_StiffnessInteractionCurve, TEXT("DisplayName"), TEXT("Interaction Curve"));
				MetaData->SetValue(NewProp_StiffnessInteractionCurve, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessInteractionCurve, TEXT("ToolTip"), TEXT("Curve values for interaction stiffness."));
				MetaData->SetValue(NewProp_StiffnessInteraction, TEXT("Category"), TEXT("Physical|Collision"));
				MetaData->SetValue(NewProp_StiffnessInteraction, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessInteraction, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessInteraction, TEXT("DisplayName"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_StiffnessInteraction, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessInteraction, TEXT("ToolTip"), TEXT("How strong the hair interaction force is."));
				MetaData->SetValue(NewProp_bCapsuleCollision, TEXT("Category"), TEXT("Physical|Collision"));
				MetaData->SetValue(NewProp_bCapsuleCollision, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bCapsuleCollision, TEXT("ToolTip"), TEXT("Whether to use the sphere/capsule collision or not for hair/body collision."));
				MetaData->SetValue(NewProp_Friction, TEXT("Category"), TEXT("Physical|Collision"));
				MetaData->SetValue(NewProp_Friction, TEXT("ClampMax"), TEXT("10"));
				MetaData->SetValue(NewProp_Friction, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Friction, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_Friction, TEXT("ToolTip"), TEXT("Friction when capsule collision is used."));
				MetaData->SetValue(NewProp_Backstop, TEXT("Category"), TEXT("Physical|Collision"));
				MetaData->SetValue(NewProp_Backstop, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Backstop, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Backstop, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_Backstop, TEXT("ToolTip"), TEXT("Radius of backstop collision(normalized along hair length)."));
				MetaData->SetValue(NewProp_StiffnessBendCurve, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessBendCurve, TEXT("DisplayName"), TEXT("Bend Curve"));
				MetaData->SetValue(NewProp_StiffnessBendCurve, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessBendCurve, TEXT("ToolTip"), TEXT("Curve values for stiffness bend"));
				MetaData->SetValue(NewProp_StiffnessBend, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessBend, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessBend, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessBend, TEXT("DisplayName"), TEXT("Bend"));
				MetaData->SetValue(NewProp_StiffnessBend, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessBend, TEXT("ToolTip"), TEXT("Stiffness for bending, useful for long hair"));
				MetaData->SetValue(NewProp_StiffnessTip, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessTip, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessTip, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessTip, TEXT("DisplayName"), TEXT("Tip"));
				MetaData->SetValue(NewProp_StiffnessTip, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessTip, TEXT("ToolTip"), TEXT("Attenuation of stiffness away from the tip (stiffer at tip, weaker toward root)."));
				MetaData->SetValue(NewProp_StiffnessRootMap, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessRootMap, TEXT("DisplayName"), TEXT("Root Map"));
				MetaData->SetValue(NewProp_StiffnessRootMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessRootMap, TEXT("ToolTip"), TEXT("Control map for stiffness root."));
				MetaData->SetValue(NewProp_StiffnessRoot, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessRoot, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessRoot, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessRoot, TEXT("DisplayName"), TEXT("Root"));
				MetaData->SetValue(NewProp_StiffnessRoot, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessRoot, TEXT("ToolTip"), TEXT("Attenuation of stiffness away from the root (stiffer at root, weaker toward tip)."));
				MetaData->SetValue(NewProp_StiffnessDampingCurve, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessDampingCurve, TEXT("DisplayName"), TEXT("Damping Curve"));
				MetaData->SetValue(NewProp_StiffnessDampingCurve, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessDampingCurve, TEXT("ToolTip"), TEXT("Curve values for stiffness damping"));
				MetaData->SetValue(NewProp_StiffnessDamping, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessDamping, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessDamping, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessDamping, TEXT("DisplayName"), TEXT("Damping"));
				MetaData->SetValue(NewProp_StiffnessDamping, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessDamping, TEXT("ToolTip"), TEXT("How fast hair stiffness generated motion decays over time."));
				MetaData->SetValue(NewProp_StiffnessStrengthCurve, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessStrengthCurve, TEXT("DisplayName"), TEXT("Strength Curve"));
				MetaData->SetValue(NewProp_StiffnessStrengthCurve, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessStrengthCurve, TEXT("ToolTip"), TEXT("Curve values for stiffness strength"));
				MetaData->SetValue(NewProp_StiffnessStrength, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessStrength, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessStrength, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessStrength, TEXT("DisplayName"), TEXT("Strength"));
				MetaData->SetValue(NewProp_StiffnessStrength, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessStrength, TEXT("ToolTip"), TEXT("How strongly hairs move toward the stiffness target."));
				MetaData->SetValue(NewProp_StiffnessGlobalCurve, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessGlobalCurve, TEXT("DisplayName"), TEXT("Global Curve"));
				MetaData->SetValue(NewProp_StiffnessGlobalCurve, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessGlobalCurve, TEXT("ToolTip"), TEXT("Curve values for stiffness."));
				MetaData->SetValue(NewProp_StiffnessGlobalMap, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessGlobalMap, TEXT("DisplayName"), TEXT("Global Map"));
				MetaData->SetValue(NewProp_StiffnessGlobalMap, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessGlobalMap, TEXT("ToolTip"), TEXT("Control map for stiffness."));
				MetaData->SetValue(NewProp_StiffnessGlobal, TEXT("Category"), TEXT("Physical|Stiffness"));
				MetaData->SetValue(NewProp_StiffnessGlobal, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_StiffnessGlobal, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_StiffnessGlobal, TEXT("DisplayName"), TEXT("Global"));
				MetaData->SetValue(NewProp_StiffnessGlobal, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_StiffnessGlobal, TEXT("ToolTip"), TEXT("How close hairs try to stay within skinned position."));
				MetaData->SetValue(NewProp_WindNoise, TEXT("Category"), TEXT("Physical|Wind"));
				MetaData->SetValue(NewProp_WindNoise, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WindNoise, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_WindNoise, TEXT("DisplayName"), TEXT("Noise"));
				MetaData->SetValue(NewProp_WindNoise, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WindNoise, TEXT("ToolTip"), TEXT("Noise of wind strength."));
				MetaData->SetValue(NewProp_Wind, TEXT("Category"), TEXT("Physical|Wind"));
				MetaData->SetValue(NewProp_Wind, TEXT("DisplayName"), TEXT("Strength"));
				MetaData->SetValue(NewProp_Wind, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_Wind, TEXT("ToolTip"), TEXT("Main wind strength."));
				MetaData->SetValue(NewProp_WindDirection, TEXT("Category"), TEXT("Physical|Wind"));
				MetaData->SetValue(NewProp_WindDirection, TEXT("DisplayName"), TEXT("Direction"));
				MetaData->SetValue(NewProp_WindDirection, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_WindDirection, TEXT("ToolTip"), TEXT("Vector for main wind direction."));
				MetaData->SetValue(NewProp_InertiaLimit, TEXT("Category"), TEXT("Physical|General"));
				MetaData->SetValue(NewProp_InertiaLimit, TEXT("ClampMax"), TEXT("1000"));
				MetaData->SetValue(NewProp_InertiaLimit, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_InertiaLimit, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_InertiaLimit, TEXT("ToolTip"), TEXT("Speed limit where everything gets locked (for teleport etc.)"));
				MetaData->SetValue(NewProp_InertiaScale, TEXT("Category"), TEXT("Physical|General"));
				MetaData->SetValue(NewProp_InertiaScale, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_InertiaScale, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_InertiaScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_InertiaScale, TEXT("ToolTip"), TEXT("Inertia control. (0: no inertia, 1 : full inertia)"));
				MetaData->SetValue(NewProp_Damping, TEXT("Category"), TEXT("Physical|General"));
				MetaData->SetValue(NewProp_Damping, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Damping, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Damping, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_Damping, TEXT("ToolTip"), TEXT("Damping to slow down hair motion"));
				MetaData->SetValue(NewProp_MassScale, TEXT("Category"), TEXT("Physical|General"));
				MetaData->SetValue(NewProp_MassScale, TEXT("ClampMax"), TEXT("50"));
				MetaData->SetValue(NewProp_MassScale, TEXT("ClampMin"), TEXT("-50"));
				MetaData->SetValue(NewProp_MassScale, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_MassScale, TEXT("ToolTip"), TEXT("Mass scale for this hair."));
				MetaData->SetValue(NewProp_bSimulate, TEXT("Category"), TEXT("Physical|General"));
				MetaData->SetValue(NewProp_bSimulate, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bSimulate, TEXT("ToolTip"), TEXT("Whether to turn on / off simulation."));
				MetaData->SetValue(NewProp_SplineMultiplier, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_SplineMultiplier, TEXT("ClampMax"), TEXT("4"));
				MetaData->SetValue(NewProp_SplineMultiplier, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_SplineMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_SplineMultiplier, TEXT("ToolTip"), TEXT("How many vertices are generated per each control hair segments in spline curves."));
				MetaData->SetValue(NewProp_bEnable, TEXT("Category"), TEXT("General"));
				MetaData->SetValue(NewProp_bEnable, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bEnable, TEXT("ToolTip"), TEXT("Whether to enable this hair. When disabled, hair will not cause any computation/rendering."));
				MetaData->SetValue(NewProp_ColorizeOptions, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_ColorizeOptions, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bShadingNormalCenter, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bShadingNormalCenter, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bShadingNormal, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bShadingNormal, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bPinConstraints, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bPinConstraints, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bHairInteraction, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bHairInteraction, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bCollisionCapsules, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bCollisionCapsules, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bBoundingBox, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bBoundingBox, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bBones, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bBones, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bGrowthMesh, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bGrowthMesh, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bControlPoints, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bControlPoints, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bSkinnedGuideCurves, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bSkinnedGuideCurves, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bGuideCurves, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bGuideCurves, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
				MetaData->SetValue(NewProp_bHair, TEXT("Category"), TEXT("Visualization"));
				MetaData->SetValue(NewProp_bHair, TEXT("ModuleRelativePath"), TEXT("Public/UHairworksMaterial.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHairworksMaterial(Z_Construct_UClass_UHairworksMaterial, &UHairworksMaterial::StaticClass, TEXT("UHairworksMaterial"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHairworksMaterial);
	UPackage* Z_Construct_UPackage__Script_testHairWorks()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/testHairWorks")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000080);
			FGuid Guid;
			Guid.A = 0xB465D651;
			Guid.B = 0x03B1C5CD;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
